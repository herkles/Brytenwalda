#######################################
#									  #
#         Norman Conquest CBs 	      #
#									  #
#######################################
norman_conquest_cb = {# William's Norman Conquest
	group = event
	mutually_exclusive_titles = {
		always = yes
	}

	allowed_for_character = {}
	allowed_against_character = {
		faith.religion = scope:attacker.faith.religion
	}

	is_allowed_claim_title = {
		scope:claimant =  {
			NOT = { has_trait = incapable }
			is_imprisoned = no
			OR = {
				this = scope:attacker
				AND = {
					religion = scope:attacker.religion
					dynasty = scope:attacker.dynasty
				}
			}
		}
	}

	cost = {}
	target_titles = claim
	
	on_declaration = {
		on_declared_war = yes
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier >= tier_county
					exists = holder
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
			}
		}
	}
	
	on_invalidated = {}
	on_invalidated_desc = msg_claim_war_invalidated_message

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = norman_conquest_cb_victory_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = norman_conquest_cb_victory_desc_attacker
			}
			desc = norman_conquest_cb_victory_desc
		}
	}
	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Set land acquisition type to conquest.
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		# Transfer landed titles to the attacker.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		every_in_list = {
			list = target_titles

			#Remove elective succession law from k_england.
			clear_title_laws = yes

			# Personally seize all duchy and county titles in Southern England AND duchy titles personally held by the King of England.
			every_in_de_jure_hierarchy = {# Saxon England Duchy Titles
				limit = {
					tier = tier_duchy
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = custom_southern_england_saxon
						TARGET_KINGDOM = title:k_england
					}
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender

							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title_and_below_de_jure
						subject = scope:attacker
						object = this
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
							take_baronies = yes
						}
					}

					# Grab the counties that go with the duchies, too.
					every_in_de_jure_hierarchy = {
						limit = {
							tier = tier_county
							exists = holder
							holder = {
								top_liege = scope:defender

								# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
								NAND = {
									NOT = { this = top_liege }
									is_ai = no
								}
							}
						}
						hidden_effect = {
							change_title_holder = {
								holder = scope:attacker
								change = scope:change
								take_baronies = yes
							}
						}
						add_to_temporary_list = county_titles_under_transfer
					}
				}
			}
			every_in_de_jure_hierarchy = {# Norman England Duchy Titles just in case
				limit = {
					tier = tier_duchy
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = custom_southern_england
						TARGET_KINGDOM = title:k_england
					}
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender

							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title_and_below_de_jure
						subject = scope:attacker
						object = this
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
							take_baronies = yes
						}
					}

					# Grab the counties that go with the duchies, too.
					every_in_de_jure_hierarchy = {
						limit = {
							tier = tier_county
							exists = holder
							holder = {
								top_liege = scope:defender

								# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
								NAND = {
									NOT = { this = top_liege }
									is_ai = no
								}
							}
						}
						hidden_effect = {
							change_title_holder = {
								holder = scope:attacker
								change = scope:change
								take_baronies = yes
							}
						}
						add_to_temporary_list = county_titles_under_transfer
					}
				}
			}
			every_in_de_jure_hierarchy = {# Saxon England county Titles
				limit = {
					tier = tier_county
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = custom_southern_england_saxon
						TARGET_KINGDOM = title:k_england
					}
					NOT = { is_in_list = county_titles_under_transfer }
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender

							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title
						subject = scope:attacker
						object = this
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
							take_baronies = yes
						}
					}
				}
			}
			every_in_de_jure_hierarchy = {# Norman England County Titles just in case
				limit = {
					tier = tier_county
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = custom_southern_england
						TARGET_KINGDOM = title:k_england
					}
					NOT = { is_in_list = county_titles_under_transfer }
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender

							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title
						subject = scope:attacker
						object = this
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
							take_baronies = yes
						}
					}
				}
			}			

			# Personally seize every county title in the Southern England AND county titles personally held by the King of England.

		}				

		resolve_title_and_vassal_change = scope:change
		
		scope:attacker = { 
			give_nickname = nick_the_conqueror 
			if = {
				limit = { exists = global_var:started_norman_yoke_achievement }
				add_achievement_global_variable_effect = {
					VARIABLE = achievement_norman_yoke_war_flag
					VALUE = yes
				}
			}
			if = {
				limit = {
					is_ai = yes
					has_title = title:c_middlesex
				}
				set_realm_capital = title:c_middlesex
			}
		}

		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
		scope:attacker = { 
			trigger_event = {
				id = bryten_england.001
				days = { 3 5 }
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = norman_conquest_cb_white_peace_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = norman_conquest_cb_white_peace_desc_attacker
			}
			desc = norman_conquest_cb_white_peace_desc
		}
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		
		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:attacker = { has_weak_claim_on = prev } }
				scope:attacker = {
					make_claim_strong = prev
				}
			}
		}
		
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}

		# Small prestige penalty to the attacker for failing to win their own war.
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5
			}
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant = {
					can_add_hook = {
						type = favor_hook
						target = scope:attacker
					}
				}
			}
			scope:claimant = {
				add_hook = {
					target = scope:attacker
					type = favor_hook
				}
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = norman_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = norman_conquest_cb_defeat_desc_attacker
			}
			desc = norman_conquest_cb_defeat_desc
		}
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
	
		# lose claims
		if = {
			limit = { scope:attacker = scope:claimant }
			every_in_list = {
				list = target_titles
				scope:claimant = {
					remove_claim = prev
				}
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant = {
					can_add_hook = {
						type = favor_hook
						target = scope:attacker
					}
				}
			}
			scope:claimant = {
				add_hook = {
					target = scope:attacker
					type = favor_hook
				}
			}
		}
		
		# Award the appropriate amount of prestige to all participants in the war.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes
	
	attacker_wargoal_percentage = 0.8
	
	max_ai_diplo_distance_to_title = 1000
}
norwegian_invasion_cb = {# Harold Hardrada's invansion
	icon = invasion
	group = event
	mutually_exclusive_titles = {
		always = yes
	}

	#allowed_for_character = {}

	allowed_against_character = {
		faith.religion = scope:attacker.faith.religion
	}

	is_allowed_claim_title = {
		scope:claimant =  {
			NOT = { has_trait = incapable }
			is_imprisoned = no
			OR = {
				this = scope:attacker
				AND = {
					religion = scope:attacker.religion
					dynasty = scope:attacker.dynasty
				}
			}
		}
	}

	cost = {
		#prestige = 1000
	}
	
	target_titles = claim
	#target_title_tier = all
	
	on_declaration = {
		on_declared_war = yes
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier >= tier_county
					exists = holder
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
			}
		}
	}
	
	on_invalidated_desc = msg_claim_war_invalidated_message

	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = norwegian_invasion_cb_victory_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = norwegian_invasion_cb_victory_desc_attacker
			}
			desc = norwegian_invasion_cb_victory_desc
		}
	}
	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_high_effect = yes }

		# Loc setup.
		character:124 = { save_scope_as = tostig }
		title:d_northumberland = { save_scope_as = northumberland}
		title:d_york = { save_scope_as = york }
		title:d_lancaster = { save_scope_as = lancaster}
		custom_tooltip = norwegian_invasion_cb_victory_with_tostig_desc
		# Set land acquisition type to conquest.
		hidden_effect = {
			create_title_and_vassal_change = {
				type = conquest
				save_scope_as = change
				add_claim_on_loss = yes
			}
			
			# Transfer landed titles to the attacker.
			setup_claim_cb = {
				titles = target_titles
				attacker = scope:attacker
				defender = scope:defender
				claimant = scope:claimant
				change = scope:change
			}
			
			every_in_list = {
				list = target_titles

				#Remove elective succession law from k_england.
				clear_title_laws = yes	

				# Personally seize all duchy titles in Northern England AND all duchy titles personally held by the King of England.
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_duchy
						special_invasion_cb_seize_land_in_region_trigger = {
							TARGET_REGION = custom_northern_england
							TARGET_KINGDOM = title:k_england
						}
					}
					if = {
						limit = {
							exists = holder
							holder = {
								exists = top_liege
								top_liege = scope:defender

								# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
								NAND = {
									NOT = { this = top_liege }
									is_ai = no
								}
							}
						}
						custom_description = {
							text = custom_seize_title_and_below_de_jure
							subject = scope:attacker
							object = this
							change_title_holder = {
								holder = scope:attacker
								change = scope:change
								take_baronies = no
							}
						}

						# Grab the counties that go with the duchies, too.
						every_in_de_jure_hierarchy = {
							limit = {
								tier = tier_county
								exists = holder
								holder = {
									top_liege = scope:defender

									# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
									NAND = {
										NOT = { this = top_liege }
										is_ai = no
									}
								}
							}
							hidden_effect = {
								change_title_holder = {
									holder = scope:attacker
									change = scope:change
									take_baronies = no
								}
							}
						}
					}
				}
				# Personally seize every county title in the Northern England AND county titles personally held by the King of England.
				every_in_de_jure_hierarchy = {
					limit = {
						tier = tier_county
						special_invasion_cb_seize_land_in_region_trigger = {
							TARGET_REGION = custom_northern_england
							TARGET_KINGDOM = title:k_england
						}
					}
					if = {
						limit = {
							exists = holder
							holder = {
								exists = top_liege
								top_liege = scope:defender

								# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
								NAND = {
									NOT = { this = top_liege }
									is_ai = no
								}
							}
						}
						custom_description = {
							text = custom_seize_title
							subject = scope:attacker
							object = this
							change_title_holder = {
								holder = scope:attacker
								change = scope:change
								take_baronies = no
							}
						}
					}
				}
			}				
			resolve_title_and_vassal_change = scope:change
		}

		#If Tostig is still alive, and in Harold's court, give him back his northern lands, and give Hardrada a reward.
		scope:attacker = {
			if = {
				limit = {
					character:124 = {
						is_alive = yes
						is_pool_character = no
						exists = liege
						liege = scope:attacker
					}
				}

				#Grab the appropriate titles.
				title:d_northumberland = {
					every_in_de_jure_hierarchy = {
						continue = { tier >= tier_duchy }
						add_to_list = tostig_reward_titles
					}
				}
				title:d_york = {
					every_in_de_jure_hierarchy = {
						continue = { tier >= tier_duchy }
						add_to_list = tostig_reward_titles
					}
				}
				title:d_lancaster = {
					every_in_de_jure_hierarchy = {
						continue = { tier >= tier_duchy }
						add_to_list = tostig_reward_titles
					}
				}

				#Adjust titles.
				hidden_effect = {
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					every_in_list = {
						list = tostig_reward_titles
						limit = { holder = scope:attacker }
						change_title_holder = {
							holder = character:124
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
				
				#A hook for Harold.
				add_hook = {
					type = loyalty_hook
					target = character:124
				}
				#And some opinion.
				reverse_add_opinion = {
					target = character:124
					modifier = loyal_servant
				}
			}
		}

		#If William already won the conquest, loose Normandy back into the continent.
		scope:attacker = {
			if = {
				limit = {
					any_vassal = {
						primary_title = title:d_normandy
					}
				}
				random_vassal = {
					limit = { primary_title = title:d_normandy }
					save_scope_as = free_william	#Harald Hardrada & William the Bastard? A friendship you could never imagine!
				}
				scope:free_william = {
					#De-vassalise him.
					create_title_and_vassal_change = {
						type = independency
						save_scope_as = change
						add_claim_on_loss = no
					}
					becomes_independent = { change = scope:change }
					resolve_title_and_vassal_change = scope:change
					#Take away his "Conqueror" title. Clearly he does not deserve it.
					if = {
						#William goes back to being the Bastard.
						limit = {
							this = character:140
							has_nickname = nick_the_conqueror
						}
						give_nickname = nick_the_bastard
					}
					else = {
						#Anyone else will be mocked forever for their brief victory.
						give_nickname = nick_the_unready
					}
				}
			}
			#And give him Maine & Sable too.
			if = {
				limit = { title:c_maine.holder.liege = scope:attacker }
				create_title_and_vassal_change = {
					type = revoked
					save_scope_as = change
					add_claim_on_loss = no
				}
				title:c_maine.holder = {
					change_liege = {
						liege = scope:free_william
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
			if = {
				limit = {
					NOT = { title:c_sable.holder = title:c_maine.holder }
					title:c_sable.holder.liege = scope:attacker
				}
				create_title_and_vassal_change = {
					type = revoked
					save_scope_as = change
					add_claim_on_loss = no
				}
				title:c_sable.holder = {
					change_liege = {
						liege = scope:free_william
						change = scope:change
					}
				}
				resolve_title_and_vassal_change = scope:change
			}
		}

		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = norwegian_invasion_cb_white_peace_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = norwegian_invasion_cb_white_peace_desc_attacker
			}
			desc = norwegian_invasion_cb_white_peace_desc
		}
	}
	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:attacker = { accolade_attacker_war_end_glory_gain_low_effect = yes }
		scope:defender = { accolade_defender_war_end_glory_gain_med_effect = yes }
		
		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:attacker = { has_weak_claim_on = prev } }
				scope:attacker = {
					make_claim_strong = prev
				}
			}
		}
		
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}

		# Small prestige penalty to the attacker for failing to win their own war.
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5
			}
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant = {
					can_add_hook = {
						type = favor_hook
						target = scope:attacker
					}
				}
			}
			scope:claimant = {
				add_hook = {
					target = scope:attacker
					type = favor_hook
				}
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = norwegian_invasion_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = norwegian_invasion_cb_defeat_desc_attacker
			}
			desc = norwegian_invasion_cb_defeat_desc
		}
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		#EP2 accolade glory gain for winning against higher ranked enemy
		scope:defender = { accolade_defender_war_end_glory_gain_high_effect = yes }
	
		# lose claims
		if = {
			limit = { scope:attacker = scope:claimant }
			every_in_list = {
				list = target_titles
				scope:claimant = {
					remove_claim = prev
				}
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant = {
					can_add_hook = {
						type = favor_hook
						target = scope:attacker
					}
				}
			}
			scope:claimant = {
				add_hook = {
					target = scope:attacker
					type = favor_hook
				}
			}
		}
		
		# Award the appropriate amount of prestige to all participants in the war.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60
	
	attacker_wargoal_percentage = 0.8
	
	max_defender_score_from_occupation = 150
	max_attacker_score_from_occupation = 150

	should_show_war_goal_subview = yes
	
	max_ai_diplo_distance_to_title = 1000
}
exeter_rebellion_cb = {# The Exeter Rebellion
	group = claim
	mutually_exclusive_titles = {
		NOT = {
			# If pushing personal claims, you can press multiple claims with the Divine Right innovation (High Medieval Era).
			trigger_if = {
				limit = {
					scope:attacker = scope:claimant
				}
				scope:attacker = {
					culture = {
						has_innovation = innovation_divine_right
					}
				}
			}
			# If pushing claims for someone else, you need the Rightful Ownership innovation to press multiple claims (Late Medieval Era).
			trigger_else = {
				scope:attacker = {
					culture = {
						has_innovation = innovation_rightful_ownership
					}
				}
			}
		}
	}

	is_allowed_claim_title = {
		custom_description = {
			text = "claimant_titles_held_by_you_or_vassal"
			NOR = {
				holder = scope:attacker
				holder = {
					target_is_liege_or_above = scope:attacker
				}
			}
		}
		scope:claimant = {
			NOT = { has_trait = incapable }
			trigger_if = {
				limit = { NOT = { scope:claimant = scope:attacker } } # You can always press your own claims
				is_imprisoned = no
			}
			#religion = scope:attacker.religion
			# claimant must not be at war against defender for this claim already
			custom_description = {
				text = "claimant_already_pressing_their_claim"
				object = root
				NAND = {
					liege = scope:attacker
					any_character_war = {
						casus_belli = {
							any_target_title = {
								this = root
							}
						}
					}
				}
			}
		}
		scope:attacker = {
			#Cannot press claims against your own vassals, as these must be revoked.
			custom_description = {
				text = "claimant_titles_held_by_attacker_vassals"
				NOT = {
					any_vassal_or_below = {
						has_title = root
					}
				}
			}
		}
		trigger_if = {
			limit = {
				NOT = { scope:claimant = scope:attacker } # You can always press your own claims (though the prestige cost might be high)
			}
			trigger_if = {
				limit = {
					is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = scope:claimant }
				}
				trigger_if = {
					limit = {
						scope:claimant = { is_adult = yes }
					}
					save_temporary_scope_as = treat_claim_as_weak
				}
				trigger_else = {
					always = no
				}
			}
			trigger_else_if = {
				limit = {
					scope:claimant = { is_adult = no }
				}
				save_temporary_scope_as = treat_claim_as_weak
			}
			# making the default behavior explicit if no other trigger_(else_)ifs are valid
			trigger_else = {
				always = yes
			}
		}
		trigger_if = {
			limit = { exists = scope:treat_claim_as_weak }
			holder = {
				custom_description = {
					text = "claim_target_position_is_weak"
					object = scope:attacker
					OR = {
						has_trait = incapable
						is_adult = no
						is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = root.holder }
					}
				}
			}
		}
		#Under Byzantine law, a ruler must be unblemished
		trigger_if = {
			limit = {
				scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
			}
			scope:claimant = {
				custom_description = {
					text = "byzantine_claimant_is_disfigured"
					object = scope:claimant
					NOR = {
						has_trait = incapable
						has_trait = blind
						has_trait = disfigured
						has_trait = eunuch
						has_trait = maimed
						has_trait = one_eyed
						has_trait = one_legged
						has_trait = clubfooted
						has_trait = hunchbacked
						has_trait = dwarf
					}
				}
			}
		}
		#Under Byzantine law, a ruler must be able to produce children.
		trigger_if = {
			limit = {
				scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
			}
			scope:claimant = {
				custom_description = {
					text = "byzantine_claimant_is_celibate"
					object = scope:claimant
					NOR = {
						has_trait = eunuch
						has_trait = devoted
						has_trait = celibate
					}
				}
			}
		}
	}

	cost = {
		piety = {
			value = 0
			add = common_cb_impious_piety_cost
		}
		prestige = {
			value = 0
			add = claim_cb_prestige_cost
			multiply = common_cb_prestige_cost_multiplier

			if = {
				limit = {
					scope:attacker = {
						has_character_flag = temp_no_claim_war_cost
					}
				}
				multiply = {
					value = 0
					desc = "not_imprisoned_filter" # Says 'free'
				}
			}

		}
	}

	target_titles = claim
	#target_title_tier = all

	on_declaration = {
		on_declared_war = yes
		if = {
			limit = {
				scope:defender = { is_sibling_of = scope:attacker }
			}
			scope:attacker = {
				add_achievement_flag_effect = { FLAG = achievement_bad_blood_flag }
			}
		}
		debug_log_scopes = yes
	}
	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier >= tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			AND = { 
				NOT = { scope:claimant = scope:attacker } 
				scope:claimant = {
					OR = {
						is_alive = no 
					}
				}
			} 
		}
	}
	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = { scope:claimant = scope:attacker } 
					scope:claimant = { is_alive = no }
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_dead_message
			}
			triggered_desc = {
				trigger = {
					scope:claimant = {
						NOR = { 
							this = scope:attacker 
							NOR = { 
								is_vassal_or_below_of = scope:attacker 
								is_courtier_of = scope:attacker 
							}
						}
					}
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_not_vassal_message
			}
			desc = msg_claim_war_invalidated_message
		}
	}	
	on_invalidated = {
	}
	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}
		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant.primary_title.tier < scope:attacker.primary_title.tier
				scope:claimant = {
					NOT = { target_is_liege_or_above = scope:attacker }
				}
			}

			create_title_and_vassal_change = {
				type = conquest_claim
				save_scope_as = change_two
				add_claim_on_loss = yes
			}
			scope:claimant = {
				change_liege = {
					liege = scope:attacker
					change = scope:change_two
				}
			}
			resolve_title_and_vassal_change = scope:change_two
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}
		
	}

	on_white_peace = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:claimant = { has_weak_claim_on = prev } }
				scope:claimant = {
					make_claim_strong = prev
				}
			}
		}

		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5.0
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}
		
	}

	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# lose claims
		every_in_list = {
			list = target_titles
			scope:claimant = {
				remove_claim = prev
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}
		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 1000
}
svend_invasion_cb = {# Svend's conquest of Norman England
	group = event
	mutually_exclusive_titles = {
		always = yes
	}

	allowed_for_character = {}
	allowed_against_character = {
		faith.religion = scope:attacker.faith.religion
	}

	is_allowed_claim_title = {
		scope:claimant =  {
			NOT = { has_trait = incapable }
			is_imprisoned = no
			OR = {
				this = scope:attacker
				AND = {
					religion = scope:attacker.religion
					dynasty = scope:attacker.dynasty
				}
			}
		}
	}

	cost = {}
	target_titles = claim
	
	on_declaration = {
		on_declared_war = yes
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier >= tier_county
					exists = holder
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
			}
		}
	}
	
	on_invalidated = {}
	on_invalidated_desc = msg_claim_war_invalidated_message

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = svend_invasion_cb_victory_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = svend_invasion_cb_victory_desc_attacker
			}
			desc = svend_invasion_cb_victory_desc
		}
	}	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Set land acquisition type to conquest.
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		# Transfer landed titles to the attacker.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}
		every_in_list = {
			list = target_titles

			#Remove elective succession law from k_england.
			clear_title_laws = yes

			# Personally seize all duchy and county titles in Southern England AND duchy titles personally held by the King of England.
			every_in_de_jure_hierarchy = {# Saxon England Duchy Titles
				limit = {
					tier = tier_duchy
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = custom_southern_england_saxon
						TARGET_KINGDOM = title:k_england
					}
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender

							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title_and_below_de_jure
						subject = scope:attacker
						object = this
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
							take_baronies = yes
						}
					}

					# Grab the counties that go with the duchies, too.
					every_in_de_jure_hierarchy = {
						limit = {
							tier = tier_county
							exists = holder
							holder = {
								top_liege = scope:defender

								# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
								NAND = {
									NOT = { this = top_liege }
									is_ai = no
								}
							}
						}
						hidden_effect = {
							change_title_holder = {
								holder = scope:attacker
								change = scope:change
								take_baronies = yes
							}
						}
						add_to_temporary_list = county_titles_under_transfer
					}
				}
			}
			every_in_de_jure_hierarchy = {# Norman England Duchy Titles just in case
				limit = {
					tier = tier_duchy
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = custom_southern_england
						TARGET_KINGDOM = title:k_england
					}
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender

							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title_and_below_de_jure
						subject = scope:attacker
						object = this
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
							take_baronies = yes
						}
					}

					# Grab the counties that go with the duchies, too.
					every_in_de_jure_hierarchy = {
						limit = {
							tier = tier_county
							exists = holder
							holder = {
								top_liege = scope:defender

								# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
								NAND = {
									NOT = { this = top_liege }
									is_ai = no
								}
							}
						}
						hidden_effect = {
							change_title_holder = {
								holder = scope:attacker
								change = scope:change
								take_baronies = yes
							}
						}
						add_to_temporary_list = county_titles_under_transfer
					}
				}
			}
			every_in_de_jure_hierarchy = {# Saxon England county Titles
				limit = {
					tier = tier_county
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = custom_southern_england_saxon
						TARGET_KINGDOM = title:k_england
					}
					NOT = { is_in_list = county_titles_under_transfer }
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender

							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title
						subject = scope:attacker
						object = this
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
							take_baronies = yes
						}
					}
				}
			}
			every_in_de_jure_hierarchy = {# Norman England County Titles just in case
				limit = {
					tier = tier_county
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = custom_southern_england
						TARGET_KINGDOM = title:k_england
					}
					NOT = { is_in_list = county_titles_under_transfer }
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender

							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title
						subject = scope:attacker
						object = this
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
							take_baronies = yes
						}
					}
				}
			}			

			# Personally seize every county title in the Southern England AND county titles personally held by the King of England.

		}				

		resolve_title_and_vassal_change = scope:change

		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = svend_invasion_cb_white_peace_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = svend_invasion_cb_white_peace_desc_attacker
			}
			desc = svend_invasion_cb_white_peace_desc
		}
	}	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		
		# press claims		
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Small prestige penalty to the attacker for failing to win their own war.
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5
			}
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant = {
					can_add_hook = {
						type = favor_hook
						target = scope:attacker
					}
				}
			}
			scope:claimant = {
				add_hook = {
					target = scope:attacker
					type = favor_hook
				}
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = svend_invasion_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = svend_invasion_cb_defeat_desc_attacker
			}
			desc = svend_invasion_cb_defeat_desc
		}
	}	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		title:k_england.holder = { save_scope_as = norman_king }
		title:d_york.holder = { save_scope_as = english_eorl }	

		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = york_swaps_sides_war
		}
		scope:english_eorl = { 
			change_liege = {
				liege = scope:norman_king
				change = scope:york_swaps_sides_war
			}
		}
		resolve_title_and_vassal_change = scope:york_swaps_sides_war		

		# lose claims
		if = {
			limit = { scope:attacker = scope:claimant }
			every_in_list = {
				list = target_titles
				scope:claimant = {
					remove_claim = prev
				}
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant = {
					can_add_hook = {
						type = favor_hook
						target = scope:attacker
					}
				}
			}
			scope:claimant = {
				add_hook = {
					target = scope:attacker
					type = favor_hook
				}
			}
		}
		
		# Award the appropriate amount of prestige to all participants in the war.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes
	
	attacker_wargoal_percentage = 0.8
	
	max_ai_diplo_distance_to_title = 1000
}
northern_rebellion_cb = {# The Exeter Rebellion
	group = claim
	mutually_exclusive_titles = {
		NOT = {
			# If pushing personal claims, you can press multiple claims with the Divine Right innovation (High Medieval Era).
			trigger_if = {
				limit = {
					scope:attacker = scope:claimant
				}
				scope:attacker = {
					culture = {
						has_innovation = innovation_divine_right
					}
				}
			}
			# If pushing claims for someone else, you need the Rightful Ownership innovation to press multiple claims (Late Medieval Era).
			trigger_else = {
				scope:attacker = {
					culture = {
						has_innovation = innovation_rightful_ownership
					}
				}
			}
		}
	}

	is_allowed_claim_title = {
		custom_description = {
			text = "claimant_titles_held_by_you_or_vassal"
			NOR = {
				holder = scope:attacker
				holder = {
					target_is_liege_or_above = scope:attacker
				}
			}
		}
		scope:claimant = {
			NOT = { has_trait = incapable }
			trigger_if = {
				limit = { NOT = { scope:claimant = scope:attacker } } # You can always press your own claims
				is_imprisoned = no
			}
			#religion = scope:attacker.religion
			# claimant must not be at war against defender for this claim already
			custom_description = {
				text = "claimant_already_pressing_their_claim"
				object = root
				NAND = {
					liege = scope:attacker
					any_character_war = {
						casus_belli = {
							any_target_title = {
								this = root
							}
						}
					}
				}
			}
		}
		scope:attacker = {
			#Cannot press claims against your own vassals, as these must be revoked.
			custom_description = {
				text = "claimant_titles_held_by_attacker_vassals"
				NOT = {
					any_vassal_or_below = {
						has_title = root
					}
				}
			}
		}
		trigger_if = {
			limit = {
				NOT = { scope:claimant = scope:attacker } # You can always press your own claims (though the prestige cost might be high)
			}
			trigger_if = {
				limit = {
					is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = scope:claimant }
				}
				trigger_if = {
					limit = {
						scope:claimant = { is_adult = yes }
					}
					save_temporary_scope_as = treat_claim_as_weak
				}
				trigger_else = {
					always = no
				}
			}
			trigger_else_if = {
				limit = {
					scope:claimant = { is_adult = no }
				}
				save_temporary_scope_as = treat_claim_as_weak
			}
			# making the default behavior explicit if no other trigger_(else_)ifs are valid
			trigger_else = {
				always = yes
			}
		}
		trigger_if = {
			limit = { exists = scope:treat_claim_as_weak }
			holder = {
				custom_description = {
					text = "claim_target_position_is_weak"
					object = scope:attacker
					OR = {
						has_trait = incapable
						is_adult = no
						is_weak_claimant_due_to_gender_trigger = { FAITH = scope:attacker.faith CHARACTER = root.holder }
					}
				}
			}
		}
		#Under Byzantine law, a ruler must be unblemished
		trigger_if = {
			limit = {
				scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
			}
			scope:claimant = {
				custom_description = {
					text = "byzantine_claimant_is_disfigured"
					object = scope:claimant
					NOR = {
						has_trait = incapable
						has_trait = blind
						has_trait = disfigured
						has_trait = eunuch
						has_trait = maimed
						has_trait = one_eyed
						has_trait = one_legged
						has_trait = clubfooted
						has_trait = hunchbacked
						has_trait = dwarf
					}
				}
			}
		}
		#Under Byzantine law, a ruler must be able to produce children.
		trigger_if = {
			limit = {
				scope:defender.culture = { has_cultural_parameter = physical_disfigurement_blocks_inheritance }
			}
			scope:claimant = {
				custom_description = {
					text = "byzantine_claimant_is_celibate"
					object = scope:claimant
					NOR = {
						has_trait = eunuch
						has_trait = devoted
						has_trait = celibate
					}
				}
			}
		}
	}

	cost = {
		piety = {
			value = 0
			add = common_cb_impious_piety_cost
		}
		prestige = {
			value = 0
			add = claim_cb_prestige_cost
			multiply = common_cb_prestige_cost_multiplier

			if = {
				limit = {
					scope:attacker = {
						has_character_flag = temp_no_claim_war_cost
					}
				}
				multiply = {
					value = 0
					desc = "not_imprisoned_filter" # Says 'free'
				}
			}

		}
	}

	target_titles = claim
	#target_title_tier = all

	on_declaration = {
		on_declared_war = yes
		if = {
			limit = {
				scope:defender = { is_sibling_of = scope:attacker }
			}
			scope:attacker = {
				add_achievement_flag_effect = { FLAG = achievement_bad_blood_flag }
			}
		}
		debug_log_scopes = yes
	}
	should_invalidate = {
		OR = {
			NOT = {
				any_in_list = {
					list = target_titles
					any_in_de_jure_hierarchy = {
						tier >= tier_county
						exists = holder
						holder = {
							OR = {
								this = scope:defender
								target_is_liege_or_above = scope:defender
							}
						}
					}
				}
			}
			AND = { 
				NOT = { scope:claimant = scope:attacker } 
				scope:claimant = {
					OR = {
						is_alive = no 
					}
				}
			} 
		}
	}
	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					NOT = { scope:claimant = scope:attacker } 
					scope:claimant = { is_alive = no }
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_dead_message
			}
			triggered_desc = {
				trigger = {
					scope:claimant = {
						NOR = { 
							this = scope:attacker 
							NOR = { 
								is_vassal_or_below_of = scope:attacker 
								is_courtier_of = scope:attacker 
							}
						}
					}
				}
				desc = msg_claim_war_invalidated_claimant_unavailable_not_vassal_message
			}
			desc = msg_claim_war_invalidated_message
		}
	}	
	on_invalidated = {
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest_claim
			save_scope_as = change
			add_claim_on_loss = yes
		}
		# Create a claim CB which is executed to handle title/vassal changes, in addition to being used to calculate Prestige awards for war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}

		resolve_title_and_vassal_change = scope:change

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant.primary_title.tier < scope:attacker.primary_title.tier
				scope:claimant = {
					NOT = { target_is_liege_or_above = scope:attacker }
				}
			}

			create_title_and_vassal_change = {
				type = conquest_claim
				save_scope_as = change_two
				add_claim_on_loss = yes
			}
			scope:claimant = {
				change_liege = {
					liege = scope:attacker
					change = scope:change_two
				}
			}
			resolve_title_and_vassal_change = scope:change_two
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}
		
	}
	on_white_peace = {
		scope:attacker = {
			show_pow_release_message_effect = yes
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}

		# press claims
		every_in_list = {
			list = target_titles
			if = {
				limit = { scope:claimant = { has_weak_claim_on = prev } }
				scope:claimant = {
					make_claim_strong = prev
				}
			}
		}

		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5.0
			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
		# Defender neither gains nor loses any prestige.
		scope:defender = {
			stress_impact = {
 				arrogant = medium_stress_impact_gain
 			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}
		
	}
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# lose claims
		every_in_list = {
			list = target_titles
			scope:claimant = {
				remove_claim = prev
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:attacker = {
					can_add_hook = {
					  	type = favor_hook
					  	target = scope:claimant
					}
				}
			}
			scope:attacker = {
				add_hook = {
		  			target = scope:claimant
		  			type = favor_hook
		 		}
			}
		}

		# Attacker pays gold to the defender as reparations.
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 3
			}
		}
		# Create an 'helper' claim CB which we won't execute, but can use to determine how much Prestige should be given to war participants.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	transfer_behavior = transfer

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes

	attacker_wargoal_percentage = 0.8

	max_ai_diplo_distance_to_title = 1000
}
#######################################
#									  #
#       Great Heathen Army CBs 	      #
#									  #
#######################################
sons_of_lothbrok_invasion_east_anglia_cb = {# Sons of Lothbrok Invansion of East Anglia
	group = event

	allowed_for_character = {}
	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
			}
		}
	}

	cost = {
		piety = {
			add = {
				value = 100
				desc = CB_BASE_COST
			}
			multiply = common_cb_piety_cost_multiplier
		}
	}
	should_invalidate = {
		OR = {
			AND = {	#A formal flowery war only invalidates if neither side is an interested participant.
				scope:attacker.faith = {
					NOT = { has_doctrine_parameter = human_sacrifice_active }
				}
				scope:defender.faith = {
					NOT = { has_doctrine_parameter = human_sacrifice_active }
				}
			}
			scope:attacker = {
				any_prisoner = { has_character_modifier = designated_human_sacrifice_modifier }
			}
		}
	}
	on_invalidated_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:attacker = {
						any_prisoner = { has_character_modifier = designated_human_sacrifice_modifier }
					}
				}
				desc = flowery_war_cb_ended_invalid.desc_other_sacrifices_attacker
			}
			desc = flowery_war_cb_ended_invalid.desc_no_sacrificers
		}
	}
	on_invalidated = {
		
	}

	on_declaration = {
		on_declared_war = yes
	
	}
	on_victory_desc = {
		desc = flowery_war_cb_victory_desc
	}
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			if = {	#If the attacker enjoys human sacrifice, then this was sacred.
				limit = {
					faith = { has_doctrine_parameter = human_sacrifice_active }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_county }
					add_piety = { value = minor_piety_gain }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_duchy }
					add_piety = { value = medium_piety_gain }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_kingdom }
					add_piety = { value = major_piety_gain }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_empire }
					add_piety = { value = massive_piety_gain }
				}
			}
			else = {	#If the attacker has since stopped enjoying human sacrifice, then the war was just prestigious.
				if = {
					limit = { scope:defender.primary_title.tier = tier_county }
					add_prestige = { value = minor_prestige_gain }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_duchy }
					add_prestige = { value = medium_prestige_gain }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_kingdom }
					add_prestige = { value = major_prestige_gain }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_empire }
					add_prestige = { value = massive_prestige_gain }
				}
			}
		}
		scope:defender = {
			if = {	#If the defender shares the faith of the attacker, then this war was sacred for them too.
				limit = {
					faith = { this = scope:attacker.faith }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_county }
					add_piety = {
						value = minor_piety_gain
						multiply = 0.75
					}
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_duchy }
					add_piety = {
						value = medium_piety_gain
						multiply = 0.75
					}
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_kingdom }
					add_piety = {
						value = major_piety_gain
						multiply = 0.75
					}
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_empire }
					add_piety = {
						value = massive_piety_gain
						multiply = 0.75
					}
				}
			}
			else = {	#Otherwise, the war just sucked.
				if = {
					limit = { scope:defender.primary_title.tier = tier_county }
					add_prestige = { value = minor_prestige_loss }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_duchy }
					add_prestige = { value = medium_prestige_loss }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_kingdom }
					add_prestige = { value = major_prestige_loss }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_empire }
					add_prestige = { value = massive_prestige_loss }
				}
			}
		}
		scope:attacker = {	#If the attacker has the appropriate tenet, grab some suitable courtiers from the defender.
			if = {
				limit = {
					faith = { has_doctrine_parameter = human_sacrifice_active }
				}
				custom_tooltip = flowery_war_cb_prisoners.tt_attacker
				hidden_effect = {
					scope:defender = {
						every_courtier_or_guest = { add_to_list = potential_captives_list }
						random_in_list = {	#Nab someone related to the defender, preferring tangentials.
							list = potential_captives_list
							limit = {
								OR = {
									AND = {
										has_dynasty = yes
										dynasty = scope:defender.dynasty
									}
									is_consort_of = scope:defender
								}
							}
							alternative_limit = { always = yes }
							weight = {
								base = 1
								modifier = {
									add = 25
									NOT = { is_close_family_of = scope:defender }
								}
								modifier = {
									add = 15
									NOT = { is_extended_family_of = scope:defender }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
								scope:attacker = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
						}
						random_in_list = {	#Always try to grab a second person.
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:defender }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:defender }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = {	prowess >= high_skill_rating }
								}
								modifier = {
									add = 50
									NOT = { is_close_or_extended_family_of = scope:defender }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
								scope:attacker = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
						}
						random_in_list = {	#Always try to grab a third person.
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:defender }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:defender }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = {	prowess >= high_skill_rating }
								}
								modifier = {
									add = 50
									NOT = { is_close_or_extended_family_of = scope:defender }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
								scope:attacker = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
						}
						if = {	#If at least duchy-tier, try to grab a fourth person.
							limit = { primary_title.tier >= tier_duchy }
							random_in_list = {
								list = potential_captives_list
								limit = {
									NOT = { is_in_list = definite_captives_list }
								}
								weight = {
									base = 1
									modifier = {
										add = 40
										NOT = {
											any_claim = {
												useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
											}
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
											diplomacy >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_marshal_trigger = { COURT_OWNER = scope:defender }
											martial >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_steward_trigger = { COURT_OWNER = scope:defender }
											stewardship >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
											intrigue >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NOT = { learning >= high_skill_rating }
									}
									modifier = {
										add = 10
										NOT = { prowess >= high_skill_rating }
									}
								}
								add_to_list = definite_captives_list
								save_temporary_scope_as = future_captive
								scope:attacker = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
							}
						}
						if = {	#If at least kingdom-tier, try to grab a fifth person.
							limit = { primary_title.tier >= tier_kingdom }
							random_in_list = {
								list = potential_captives_list
								limit = {
									NOT = { is_in_list = definite_captives_list }
								}
								weight = {
									base = 1
									modifier = {
										add = 40
										NOT = {
											any_claim = {
												useful_courtier_or_guest_claim_trigger = { RULER = scope:defender }
											}
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_chancellor_trigger = { COURT_OWNER = scope:defender }
											diplomacy >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_marshal_trigger = { COURT_OWNER = scope:defender }
											martial >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_steward_trigger = { COURT_OWNER = scope:defender }
											stewardship >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_spymaster_trigger = { COURT_OWNER = scope:defender }
											intrigue >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NOT = { learning >= high_skill_rating }
									}
									modifier = {
										add = 10
										NOT = { prowess >= high_skill_rating }
									}
								}
								add_to_list = definite_captives_list
								save_temporary_scope_as = future_captive
								scope:attacker = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
							}
						}
					}
					every_in_list = {
						list = definite_captives_list
						add_character_modifier = {
							modifier = designated_human_sacrifice_modifier
							years = 2
						}
					}

				}
			}
		}
		scope:attacker = { 
			trigger_event = {
				id = bryten_england.125
				days = { 3 5 }
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

	}

	on_white_peace_desc = {
		desc = flowery_war_cb_white_peace_desc
	}
	on_white_peace = {
		scope:attacker = { 
			show_pow_release_message_effect = yes
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}
		scope:attacker = {	#Piety loss for the attacker if appropriate, otherwise prestige loss.
			if = {
				limit = {
					faith = { has_doctrine_parameter = human_sacrifice_active }
				}
				add_piety = religious_cb_piety_white_peace
			}
			else = {
				add_prestige = {
					value = medium_prestige_loss
				}
			}
		}



		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # not important as the scales are identical
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		# Truce
		add_truce_attacker_victory_effect = yes

	}

	on_defeat_desc = {
		desc = flowery_war_cb_defeat_desc
	}
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		scope:attacker = {
			if = {	#If the attacker shares the faith of the defender, and both still enjoy human sacrifice, then this war was at least sacred for them.
				limit = {
					faith = {
						this = scope:defender.faith
						has_doctrine_parameter = human_sacrifice_active
					}
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_county }
					add_piety = {
						value = minor_piety_gain
						multiply = 0.75
					}
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_duchy }
					add_piety = {
						value = medium_piety_gain
						multiply = 0.75
					 }
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_kingdom }
					add_piety = {
						value = major_piety_gain
						multiply = 0.75
					}
				}
				if = {
					limit = { scope:defender.primary_title.tier = tier_empire }
					add_piety = {
						value = massive_piety_gain
						multiply = 0.75
					}
				}
			}
			else = {	#Otherwise, the war just sucked.
				if = {
					limit = { scope:attacker.primary_title.tier = tier_county }
					add_prestige = { value = minor_prestige_loss }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_duchy }
					add_prestige = { value = medium_prestige_loss }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_kingdom }
					add_prestige = { value = major_prestige_loss }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_empire }
					add_prestige = { value = massive_prestige_loss }
				}
			}
		}
		scope:defender = {
			if = {	#If the defender has the same faith as the attacker, and that faith still enjoys human sacrifice, then this was sacred.
				limit = {
					faith = {
						this = scope:attacker.faith
						has_doctrine_parameter = human_sacrifice_active
					}
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_county }
					add_piety = { value = minor_piety_gain }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_duchy }
					add_piety = { value = medium_piety_gain }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_kingdom }
					add_piety = { value = major_piety_gain }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_empire }
					add_piety = { value = massive_piety_gain }
				}
			}
			else = {	#Otherwise, the war was just prestigious.
				if = {
					limit = { scope:attacker.primary_title.tier = tier_county }
					add_prestige = { value = minor_prestige_gain }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_duchy }
					add_prestige = { value = medium_prestige_gain }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_kingdom }
					add_prestige = { value = major_prestige_gain }
				}
				if = {
					limit = { scope:attacker.primary_title.tier = tier_empire }
					add_prestige = { value = massive_prestige_gain }
				}
			}
		}
		scope:defender = {	#If the defender has the appropriate tenet, and doesn't already have sacrificial victims, grab some suitable courtiers from the attacker.
			if = {
				limit = {
					faith = { has_doctrine_parameter = human_sacrifice_active }
					NOT = {	#Must not have any leftover sacrificial prisoners, lest the defender get borked sacrifice-accounting events.
						any_prisoner = { has_character_modifier = designated_human_sacrifice_modifier }
					}
				}
				custom_tooltip = flowery_war_cb_prisoners.tt_defender
				hidden_effect = {
					scope:attacker = {
						every_courtier_or_guest = { add_to_list = potential_captives_list }
						random_in_list = {	#Nab someone related to the attacker, preferring tangentials.
							list = potential_captives_list
							limit = {
								OR = {
									AND = {
										has_dynasty = yes
										dynasty = scope:attacker.dynasty
									}
									is_consort_of = scope:attacker
								}
							}
							alternative_limit = { always = yes }
							weight = {
								base = 1
								modifier = {
									add = 25
									NOT = { is_close_family_of = scope:attacker }
								}
								modifier = {
									add = 15
									NOT = { is_extended_family_of = scope:attacker }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
								scope:defender = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
						}
						random_in_list = {	#Always try to grab a second person.
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:attacker }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:attacker }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:attacker }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:attacker }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:attacker }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = {	prowess >= high_skill_rating }
								}
								modifier = {
									add = 50
									NOT = { is_close_or_extended_family_of = scope:defender }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
								scope:defender = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
						}
						random_in_list = {	#Always try to grab a third person.
							list = potential_captives_list
							limit = {
								NOT = { is_in_list = definite_captives_list }
							}
							weight = {
								base = 1
								modifier = {
									add = 40
									NOT = {
										any_claim = {
											useful_courtier_or_guest_claim_trigger = { RULER = scope:attacker }
										}
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_chancellor_trigger = { COURT_OWNER = scope:attacker }
										diplomacy >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_marshal_trigger = { COURT_OWNER = scope:attacker }
										martial >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_steward_trigger = { COURT_OWNER = scope:attacker }
										stewardship >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NAND = {
										can_be_spymaster_trigger = { COURT_OWNER = scope:attacker }
										intrigue >= high_skill_rating
									}
								}
								modifier = {
									add = 10
									NOT = { learning >= high_skill_rating }
								}
								modifier = {
									add = 10
									NOT = {	prowess >= high_skill_rating }
								}
								modifier = {
									add = 50
									NOT = { is_close_or_extended_family_of = scope:defender }
								}
							}
							add_to_list = definite_captives_list
							save_temporary_scope_as = future_captive
								scope:defender = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
						}
						if = {	#If at least duchy-tier, try to grab a fourth person.
							limit = { primary_title.tier >= tier_duchy }
							random_in_list = {
								list = potential_captives_list
								limit = {
									NOT = { is_in_list = definite_captives_list }
								}
								weight = {
									base = 1
									modifier = {
										add = 40
										NOT = {
											any_claim = {
												useful_courtier_or_guest_claim_trigger = { RULER = scope:attacker }
											}
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_chancellor_trigger = { COURT_OWNER = scope:attacker }
											diplomacy >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_marshal_trigger = { COURT_OWNER = scope:attacker }
											martial >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_steward_trigger = { COURT_OWNER = scope:attacker }
											stewardship >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_spymaster_trigger = { COURT_OWNER = scope:attacker }
											intrigue >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NOT = { learning >= high_skill_rating }
									}
									modifier = {
										add = 10
										NOT = { prowess >= high_skill_rating }
									}
								}
								add_to_list = definite_captives_list
								save_temporary_scope_as = future_captive
								scope:defender = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
							}
						}
						if = {	#If at least kingdom-tier, try to grab a fifth person.
							limit = { primary_title.tier >= tier_kingdom }
							random_in_list = {
								list = potential_captives_list
								limit = {
									NOT = { is_in_list = definite_captives_list }
								}
								weight = {
									base = 1
									modifier = {
										add = 40
										NOT = {
											any_claim = {
												useful_courtier_or_guest_claim_trigger = { RULER = scope:attacker }
											}
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_chancellor_trigger = { COURT_OWNER = scope:attacker }
											diplomacy >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_marshal_trigger = { COURT_OWNER = scope:attacker }
											martial >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_steward_trigger = { COURT_OWNER = scope:attacker }
											stewardship >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NAND = {
											can_be_spymaster_trigger = { COURT_OWNER = scope:attacker }
											intrigue >= high_skill_rating
										}
									}
									modifier = {
										add = 10
										NOT = { learning >= high_skill_rating }
									}
									modifier = {
										add = 10
										NOT = { prowess >= high_skill_rating }
									}
								}
								add_to_list = definite_captives_list
								save_temporary_scope_as = future_captive
								scope:defender = {
									imprison = {
										target = scope:future_captive
										type = dungeon
									}
								}
							}
						}
					}
					every_in_list = {
						list = definite_captives_list
						add_character_modifier = {
							modifier = designated_human_sacrifice_modifier
							years = 2
						}
					}
				}
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_defeat_effect = yes

		scope:attacker = { save_temporary_scope_as = loser }
		on_lost_aggression_war_discontent_loss = yes
	}

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "FLOWERY_WAR_CB_NAME"
	war_name_base = "FLOWERY_WAR_WAR_NAME_BASE"
	cb_name = "FLOWERY_WAR_CB_NAME"
	interface_priority = 80

	ticking_war_score_targets_entire_realm = yes
	attacker_ticking_warscore = 0
	attacker_wargoal_percentage = 0.01
	attacker_score_from_occupation_scale = 50
	defender_score_from_occupation_scale = 50
	attacker_score_from_battles_scale = 200
	defender_score_from_battles_scale = 200

	max_attacker_score_from_battles = 200
	max_defender_score_from_battles = 200

	max_ai_diplo_distance_to_title = 500
	
	ai_score = {
		value = raid_for_captives_ai_score_value
	}

	ai_score_mult = {
		value = 1
		# Increase odds if the character is a vassal with Ghazi Contract
		add = {
			if = {
				limit = {
					scope:attacker = {
						is_independent_ruler = no
						vassal_contract_has_flag = vassal_contract_cheaper_religious_war
					}
				}
				add = 1
			}
		}
		# Holy War are limited to connected neighbour to limit big empire expansions over weak realms.
		add = {
			if = {
				limit = {  religious_war_vassals_constraints = yes }
				add = -1000
			}
		}
	}
}
sons_of_lothbrok_invasion_northumbria_cb = {# Sons of Lothbrok Invansion of Northumbria
	group = event

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		OR = {
			has_government = tribal_government
			faith = { has_doctrine_parameter = invasion_cb_enabled	}
		}
		NOT = {	has_character_flag = used_lifetime_invasion	}
	}

	allowed_for_character_display_regardless = {
		trigger_if = {
			limit = {
				culture = {
					has_cultural_parameter = cb_lower_prestige_level_requirement
				}
			}
			prestige_level >= 3
		}
		trigger_else = {
			prestige_level >= 4
		}
	}
	
	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
			}
		}
	}
	target_titles = all
	target_title_tier = kingdom
	target_de_jure_regions_above = yes
 	#ignore_effects = change_title_holder

	ai_can_target_all_titles = {
		can_use_viking_invasion_cbs_trigger = yes
	}
	ai_score_mult = {
		value = viking_conquest_ai_score_value

		# AI in struggles act insularly for wars that don't have a familial or legal basis.
		multiply = struggle_wars_prioritise_struggle_targets_value
	}

	valid_to_start = {
		scope:target = {
			any_in_de_jure_hierarchy = {
				tier = tier_county
				neighboring_county_or_viking_conquest_trigger = { CHARACTER = root }
			}
		}
		# Struggle constraint
		struggle_blocks_invasion_conquest_cb_trigger = yes
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						target_is_same_character_or_above = scope:defender
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_invasion_war_invalidated_message
	
	on_invalidated = {
		scope:attacker = {
			if = {
				limit = {
					is_alive = yes
				}
				remove_character_flag = used_lifetime_invasion # If the war is invalidated, you should be permitted to try again
			}
		}
	}

	cost = {
		piety = {
			value = 0
			add = common_cb_impious_piety_cost
		}
		prestige = {
			add = {
				value = 2000
				desc = CB_BASE_COST
			}

			multiply = common_cb_prestige_cost_multiplier
		}
	}
	
	on_declaration = {
		on_declared_war = yes
		scope:attacker = {
			add_character_flag = used_lifetime_invasion
		}
	}	

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = invasion_war_victory_desc_attacker
			}
			desc = invasion_war_victory_desc
		}
		triggered_desc = {
			trigger = { scope:attacker = { is_local_player = yes } }
			desc = invasion_war_warning_desc
		}
	}	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			take_occupied = yes
		}

		resolve_title_and_vassal_change = scope:change

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_invasion_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }

		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = norse_king_northumbria
		}
		title:k_northumbria = {
			change_title_holder = {
				holder = scope:attacker
				change = scope:norse_king_northumbria
			}
		}
		resolve_title_and_vassal_change = scope:norse_king_northumbria

		scope:attacker = { 
			trigger_event = {
				id = bryten_england.111
				days = { 1 2 }
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_white_peace_effect = yes

		scope:attacker = {
			add_prestige = mongol_invasion_cb_prestige_white_peace
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 5
			}
			add_prestige = {
				value = massive_prestige_value
				multiply = -1.0
			}
		}
		
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}

		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
	
		add_truce_attacker_defeat_effect = yes
		scope:defender = { 
			trigger_event = {
				id = bryten_england.100
				days = { 3 5 }
			}
		}		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	transfer_behavior = transfer
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "INVASION_WAR_NAME"
	war_name_base = "INVASION_WAR_NAME_BASE"
	cb_name = "INVASION_CB_NAME"
	
	interface_priority = 100
	
	use_de_jure_wargoal_only = yes
	attacker_wargoal_percentage = 0.8


}
sons_of_lothbrok_invasion_mercia_cb = {# Sons of Lothbrok Invansion of Mercia - The invansion
	group = event

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		OR = {
			has_government = tribal_government
			faith = { has_doctrine_parameter = invasion_cb_enabled	}
		}
		NOT = {	has_character_flag = used_lifetime_invasion	}
	}

	allowed_for_character_display_regardless = {
		trigger_if = {
			limit = {
				culture = {
					has_cultural_parameter = cb_lower_prestige_level_requirement
				}
			}
			prestige_level >= 3
		}
		trigger_else = {
			prestige_level >= 4
		}
	}
	
	allowed_against_character = {
		scope:attacker = {
			ALL_FALSE = {
				top_liege = scope:defender.top_liege
				liege = scope:defender
			}
		}
	}
	target_titles = all
	target_title_tier = kingdom
	target_de_jure_regions_above = yes
	# ignore_effects = change_title_holder

	ai_can_target_all_titles = {
		can_use_viking_invasion_cbs_trigger = yes
	}
	ai_score_mult = {
		value = viking_conquest_ai_score_value

		# AI in struggles act insularly for wars that don't have a familial or legal basis.
		multiply = struggle_wars_prioritise_struggle_targets_value
	}

	valid_to_start = {
		scope:target = {
			any_in_de_jure_hierarchy = {
				tier = tier_county
				neighboring_county_or_viking_conquest_trigger = { CHARACTER = root }
			}
		}
		# Struggle constraint
		struggle_blocks_invasion_conquest_cb_trigger = yes
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						target_is_same_character_or_above = scope:defender
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_invasion_war_invalidated_message
	
	on_invalidated = {
		scope:attacker = {
			if = {
				limit = {
					is_alive = yes
				}
				remove_character_flag = used_lifetime_invasion # If the war is invalidated, you should be permitted to try again
			}
		}
	}

	cost = {
		piety = {
			value = 0
			add = common_cb_impious_piety_cost
		}
		prestige = {
			add = {
				value = 2000
				desc = CB_BASE_COST
			}

			multiply = common_cb_prestige_cost_multiplier
		}
	}
	
	on_declaration = {
		on_declared_war = yes
		scope:attacker = {
			add_character_flag = used_lifetime_invasion
		}
	}	

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = invasion_war_victory_desc_attacker
			}
			desc = invasion_war_victory_desc
		}
		triggered_desc = {
			trigger = { scope:attacker = { is_local_player = yes } }
			desc = invasion_war_warning_desc
		}
	}	
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			change = scope:change
			take_occupied = yes
		}

		resolve_title_and_vassal_change = scope:change

		# Attacker gets Prestige Experience, Defender loses Prestige, all other participants gain Prestige based on their war contribution.
		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_invasion_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }

	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}	
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = major_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_white_peace_effect = yes

		scope:attacker = {
			add_prestige = mongol_invasion_cb_prestige_white_peace
			stress_impact = {
				ambitious = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = invasion_war_white_peace_desc_defender
			}
			desc = invasion_war_white_peace_desc
		}
	}
	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 5
			}
			add_prestige = {
				value = massive_prestige_value
				multiply = -1.0
			}
		}
		
		setup_invasion_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}

		# Attacker loses Prestige, all other war participants gain Prestige (Defender gains full prestige, all allies on both sides gain based on war contribution).
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}
	
		add_truce_attacker_defeat_effect = yes		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	transfer_behavior = transfer
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "INVASION_WAR_NAME"
	war_name_base = "INVASION_WAR_NAME_BASE"
	cb_name = "INVASION_CB_NAME"
	
	interface_priority = 100
	
	use_de_jure_wargoal_only = yes
	attacker_wargoal_percentage = 0.8
}
sons_of_lothbrok_invasion_mercia2_cb = {# Sons of Lothbrok Invansion of Mercia - placing Ceolwulf on the throne
	group = event
	mutually_exclusive_titles = {
		always = yes
	}

	allowed_for_character = {}
	allowed_against_character = {
		faith.religion = scope:attacker.faith.religion
	}

	is_allowed_claim_title = {
		scope:claimant =  {
			NOT = { has_trait = incapable }
			is_imprisoned = no
			OR = {
				this = scope:attacker
				AND = {
					religion = scope:attacker.religion
					dynasty = scope:attacker.dynasty
				}
			}
		}
	}

	cost = {}
	target_titles = claim
	
	on_declaration = {
		on_declared_war = yes
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier >= tier_county
					exists = holder
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}
			}
		}
	}
	
	on_invalidated = {}
	on_invalidated_desc = msg_claim_war_invalidated_message

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:claimant = { is_local_player = yes }
				}
				desc = claim_cb_victory_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_victory_desc_attacker
			}
			desc = claim_cb_victory_desc
		}
	}
	on_victory = {
		scope:attacker = { show_pow_release_message_effect = yes }
		# Set land acquisition type to conquest.
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}
		
		# Transfer landed titles to the attacker.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			change = scope:change
		}
		every_in_list = {
			list = target_titles

			#Remove elective succession law from k_england.
			clear_title_laws = yes

			# Personally seize all duchy and county titles in Southern England AND duchy titles personally held by the King of England.
			every_in_de_jure_hierarchy = {# Saxon England Duchy Titles
				limit = {
					tier = tier_duchy
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = custom_southern_england_saxon
						TARGET_KINGDOM = title:k_england
					}
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender

							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title_and_below_de_jure
						subject = scope:attacker
						object = this
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
							take_baronies = yes
						}
					}

					# Grab the counties that go with the duchies, too.
					every_in_de_jure_hierarchy = {
						limit = {
							tier = tier_county
							exists = holder
							holder = {
								top_liege = scope:defender

								# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
								NAND = {
									NOT = { this = top_liege }
									is_ai = no
								}
							}
						}
						hidden_effect = {
							change_title_holder = {
								holder = scope:attacker
								change = scope:change
								take_baronies = yes
							}
						}
						add_to_temporary_list = county_titles_under_transfer
					}
				}
			}
			every_in_de_jure_hierarchy = {# Norman England Duchy Titles just in case
				limit = {
					tier = tier_duchy
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = custom_southern_england
						TARGET_KINGDOM = title:k_england
					}
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender

							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title_and_below_de_jure
						subject = scope:attacker
						object = this
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
							take_baronies = yes
						}
					}

					# Grab the counties that go with the duchies, too.
					every_in_de_jure_hierarchy = {
						limit = {
							tier = tier_county
							exists = holder
							holder = {
								top_liege = scope:defender

								# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
								NAND = {
									NOT = { this = top_liege }
									is_ai = no
								}
							}
						}
						hidden_effect = {
							change_title_holder = {
								holder = scope:attacker
								change = scope:change
								take_baronies = yes
							}
						}
						add_to_temporary_list = county_titles_under_transfer
					}
				}
			}
			every_in_de_jure_hierarchy = {# Saxon England county Titles
				limit = {
					tier = tier_county
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = custom_southern_england_saxon
						TARGET_KINGDOM = title:k_england
					}
					NOT = { is_in_list = county_titles_under_transfer }
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender

							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title
						subject = scope:attacker
						object = this
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
							take_baronies = yes
						}
					}
				}
			}
			every_in_de_jure_hierarchy = {# Norman England County Titles just in case
				limit = {
					tier = tier_county
					special_invasion_cb_seize_land_in_region_trigger = {
						TARGET_REGION = custom_southern_england
						TARGET_KINGDOM = title:k_england
					}
					NOT = { is_in_list = county_titles_under_transfer }
				}
				if = {
					limit = {
						exists = holder
						holder = {
							exists = top_liege
							top_liege = scope:defender

							# Vassal players in England get to keep their holdings, so they can play as vassals of the new king instead of game-overing.
							NAND = {
								NOT = { this = top_liege }
								is_ai = no
							}
						}
					}
					custom_description = {
						text = custom_seize_title
						subject = scope:attacker
						object = this
						change_title_holder = {
							holder = scope:attacker
							change = scope:change
							take_baronies = yes
						}
					}
				}
			}			

			# Personally seize every county title in the Southern England AND county titles personally held by the King of England.

		}				

		resolve_title_and_vassal_change = scope:change

		modify_all_participants_fame_values = {
			WINNER = scope:attacker
			LOSER = scope:defender
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = 10
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# truce
		add_truce_attacker_victory_effect = yes

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }
		scope:attacker = {
			character:163102 = {
				if = {
					limit = { is_alive = yes }
					trigger_event = {
						id = bryten_england.107
						days = { 3 5 }
					}
				}
			}
			trigger_event = {
				id = bryten_england.108
				days = { 3 5 }
			}
		}



	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_white_peace_desc_defender
			}
			desc = claim_cb_white_peace_desc
		}
		
	}
	on_white_peace = {
		scope:attacker = { show_pow_release_message_effect = yes }
		
		# press claims		
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		# Small prestige penalty to the attacker for failing to win their own war.
		scope:attacker = {
			add_prestige = {
				value = scope:cb_prestige_factor # Set by 'setup_claim_cb'
				multiply = -5
			}
			stress_impact = {
 				ambitious = medium_stress_impact_gain
 				arrogant = medium_stress_impact_gain
 			}
		}
		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant = {
					can_add_hook = {
						type = favor_hook
						target = scope:attacker
					}
				}
			}
			scope:claimant = {
				add_hook = {
					target = scope:attacker
					type = favor_hook
				}
			}
		}

		scope:defender = {
			stress_impact = {
				arrogant = medium_stress_impact_gain
			}
		}

		# Truce
		add_truce_white_peace_effect = yes
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = { scope:claimant = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker_claimant
			}
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = claim_cb_defeat_desc_attacker
			}
			desc = claim_cb_defeat_desc
		}
		
	}	
	on_defeat = {
		scope:attacker = { show_pow_release_message_effect = yes }
		title:k_england.holder = { save_scope_as = norman_king }
		title:d_york.holder = { save_scope_as = english_eorl }	

		create_title_and_vassal_change = {
			type = swear_fealty
			save_scope_as = york_swaps_sides_war
		}
		scope:english_eorl = { 
			change_liege = {
				liege = scope:norman_king
				change = scope:york_swaps_sides_war
			}
		}
		resolve_title_and_vassal_change = scope:york_swaps_sides_war		

		# lose claims
		if = {
			limit = { scope:attacker = scope:claimant }
			every_in_list = {
				list = target_titles
				scope:claimant = {
					remove_claim = prev
				}
			}
		}

		if = {
			limit = {
				NOT = { scope:claimant = scope:attacker }
				scope:claimant = {
					can_add_hook = {
						type = favor_hook
						target = scope:attacker
					}
				}
			}
			scope:claimant = {
				add_hook = {
					target = scope:attacker
					type = favor_hook
				}
			}
		}
		
		# Award the appropriate amount of prestige to all participants in the war.
		setup_claim_cb = {
			titles = target_titles
			attacker = scope:attacker
			defender = scope:defender
			claimant = scope:claimant
			victory = no
		}
		modify_all_participants_fame_values = {
			WINNER = scope:defender
			LOSER = scope:attacker
			FAME_BASE = scope:cb_prestige_factor # Set by 'setup_claim_cb'
			IS_RELIGIOUS_WAR = no
			WINNER_FAME_SCALE = scale_10_war_defender_win
			LOSER_FAME_SCALE = -10
			WINNER_ALLY_FAME_SCALE = 10
			LOSER_ALLY_FAME_SCALE = 10
		}

		# Truce
		add_truce_attacker_defeat_effect = yes
		
		scope:attacker = {
			save_temporary_scope_as = loser
		}
		on_lost_aggression_war_discontent_loss = yes
	}
	
	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit
	
	transfer_behavior = transfer
	
	attacker_allies_inherit = yes
	defender_allies_inherit = yes
	
	war_name = "CLAIM_WAR_NAME"
	my_war_name = "CLAIM_WAR_NAME_MY"
	war_name_base = "CLAIM_WAR_NAME_BASE"
	cb_name = "CLAIM_CB_NAME"
	interface_priority = 60

	should_show_war_goal_subview = yes
	
	attacker_wargoal_percentage = 0.8
	
	max_ai_diplo_distance_to_title = 1000
}
guthrum_conquest_cb = {
	group = event

	combine_into_one = yes
	should_show_war_goal_subview = yes
	mutually_exclusive_titles = { always = yes }

	allowed_for_character = {
		is_ai = yes
	}

	allowed_against_character = {
		always = yes
	}
	target_titles = all
	target_title_tier = duchy
	target_de_jure_regions_above = yes
	ignore_effect = change_title_holder

	valid_to_start = {
		always = no
	}

	should_invalidate = {
		NOT = {
			any_in_list = {
				list = target_titles
				any_in_de_jure_hierarchy = {
					tier = tier_county
					holder = {
						target_is_same_character_or_above = scope:defender
					}
				}
			}
		}
	}

	on_invalidated_desc = msg_religious_war_invalidation_region_message
	
	on_invalidated = {
		scope:attacker = { clean_scandinavian_adventurer_effect = yes }
	}

	on_declaration = {
		on_declared_war = yes
	}

	on_victory_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:attacker = { is_local_player = yes } }
				desc = county_conquest_cb_victory_desc_attacker
			}
			desc = county_conquest_cb_victory_desc
		}
	}
	on_victory = {
		create_title_and_vassal_change = {
			type = conquest
			save_scope_as = change
			add_claim_on_loss = yes
		}

		# go through the dejure hierarchy under target titles, transfer titles with same or worse tolerance holders (their religion equally or less tolerated than the defender's),
		# take the holder as vassal otherwise and don't go deeper
		every_in_list = {
			list = target_titles
			custom_tooltip = CONQUEST_CB_TITLE
			every_in_de_jure_hierarchy = {
				continue = {
					OR = {
						NOT = {	exists = holder }
						NOT = {
							holder = { target_is_liege_or_above = scope:defender }
						}
						AND = {
							scope:attacker.faith = {
								faith_hostility_level_comparison = { prev.holder.faith <= scope:defender.faith }
							}
							holder = {
								OR = {
									this = scope:defender
									target_is_liege_or_above = scope:defender
								}
							}
						}
					}
					tier > tier_county
				}
				limit = {
					tier <= tier_duchy
					exists = holder
					holder = {
						OR = {
							this = scope:defender
							target_is_liege_or_above = scope:defender
						}
					}
				}

				if = {
					limit = {
						OR = {
							scope:attacker.faith = {
								faith_hostility_level_comparison = {
									prev.holder.faith >= scope:defender.faith
								}
							}
							holder.primary_title.tier >= scope:attacker.primary_title.tier
						}
					}
					add_to_temporary_list = titles_taken
				}
				else = {
					holder = {
						add_to_temporary_list = vassals_taken
					}
				}
			}
		}

		every_in_list = {
			list = titles_taken
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}

		every_in_list = {
			list = vassals_taken
			change_liege = {
				liege = scope:attacker
				change = scope:change
			}
		}

		resolve_title_and_vassal_change = scope:change

		# Prestige Progress for the Attacker
		every_in_list = {
			list = target_titles
			scope:attacker = {
				add_prestige_experience = medium_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		# Truce
		add_truce_attacker_victory_effect = yes

		#Clean-up adventurer things.
		scope:attacker = { clean_scandinavian_adventurer_effect = yes }

		# FP1: note the victory for future memorialisation via stele (if applicable).
		scope:attacker = { fp1_remember_recent_conquest_victory_effect = yes }

		scope:attacker = { 
			trigger_event = {
				id = bryten_england.110
				days = { 3 5 }
			}
		}
	}

	on_white_peace_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_white_peace_desc_defender
			}
			desc = county_conquest_cb_white_peace_desc
		}
	}
	on_white_peace = {
		# Prestige loss for the attacker
		scope:attacker = {
			add_prestige = {
				value = minor_prestige_value
				multiply = -1.0
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:attacker # Not important as the scales are identical
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_white_peace_effect = yes

		#Clean-up adventurer things.
		scope:attacker = { clean_scandinavian_adventurer_effect = yes }

		# Since they failed to win, take away their efficacy loan.
		scope:attacker = { remove_short_term_gold = scandinavian_adventurer_efficacy_loan_value }
	}

	on_defeat_desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:defender = { is_local_player = yes } }
				desc = county_conquest_cb_defeat_desc_defender
			}
			triggered_desc = {
				trigger = {
					scope:attacker = {
						is_local_player = yes
						has_targeting_faction = yes
					}
				}
				desc = county_conquest_cb_defeat_desc_attacker
			}
			desc = county_conquest_cb_defeat_desc
		}
	}
	on_defeat = {

		# Prestige loss for the attacker
		scope:attacker = {
			pay_short_term_gold_reparations_effect = {
				GOLD_VALUE = 5
			}
			add_prestige = {
				value = major_prestige_value
				multiply = -1.0
			}
		}

		# Prestige for Defender
		scope:defender = {
			add_prestige_war_defender_effect = {
				PRESTIGE_VALUE = major_prestige_value
			}
		}

		# Allies on both sides get full prestige value for helping in the war, based on their war participation.
		modify_allies_of_participants_fame_values = {
			WINNER = scope:defender
			FAME_BASE = medium_prestige_value
			IS_RELIGIOUS_WAR = no
			WINNER_ALLY_FAME_SCALE = 1
			LOSER_ALLY_FAME_SCALE = 1
		}

		add_truce_attacker_defeat_effect = yes

		scope:attacker = {
			save_temporary_scope_as = loser
		}

		on_lost_aggression_war_discontent_loss = yes

		# Give scope:defender some goodies.
		scope:defender = {
			# Including a break from the fighting.
			fp1_add_realm_size_appropriate_sa_reprieve_effect = yes
			# And a tally towards a nickname.
			## Which starts...
			if = {
				limit = {
					NOT = { has_variable = fp1_has_beaten_sa_progress }
				}
				set_variable = {
					name = fp1_has_beaten_sa_progress
					value = 1
				}
			}
			## ... and grows...
			else_if = {
				limit = {
					has_variable = fp1_has_beaten_sa_progress
					var:fp1_has_beaten_sa_progress <= 9
				}
				change_variable = {
					name = fp1_has_beaten_sa_progress
					add = 1
				}
			}
			## ... towards a pay-off.
			else_if = {
				limit = {
					OR = {
						has_bad_nickname = yes
						has_any_nickname = no
					}
				}
				hidden_effect = {
					random_list = {
						20 = { give_nickname = nick_the_bane_of_danes }
						20 = { give_nickname = nick_the_culture_wall }
						20 = { give_nickname = nick_nord_foe }
						20 = { give_nickname = nick_the_scourge_of_the_northerners }
						20 = { give_nickname = nick_the_burner_of_ash }
					}
				}
			}
		}

		#Clean-up adventurer things.
		scope:attacker = { clean_scandinavian_adventurer_effect = yes }

		# Since they lost, take away their efficacy loan.
		scope:attacker = { remove_short_term_gold = scandinavian_adventurer_efficacy_loan_value }
	}

	transfer_behavior = transfer

	on_primary_attacker_death = inherit
	on_primary_defender_death = inherit

	attacker_allies_inherit = yes
	defender_allies_inherit = yes

	war_name = "CONQUEST_WAR_NAME"
	war_name_base = "CONQUEST_WAR_NAME_BASE"
	cb_name = "CONQUEST_DUCHY_CB_NAME"

	interface_priority = 79

	use_de_jure_wargoal_only = yes

	attacker_wargoal_percentage = 0.8
}


