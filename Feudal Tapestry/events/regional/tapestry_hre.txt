namespace = tapestry_hre

#######################################
# Otto the Great Events
#######################################
tapestry_hre.001 = {# Choice given to Otto about invading Lorraine.
	type = character_event
	title = tapestry_hre.001.t
	desc = tapestry_hre.001.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}
	
	trigger = {
		this = character:1282 # triggers for Otto
		character:7813 = {# we want to make sure Giselbert is alive
			is_alive = yes
		}
		is_at_war = no # Otto needs to deal with Thankmar first.
		OR = {# either after Thankmars rebellion or 940
			current_year >= 940
			has_global_variable = thankmar_rebel_event
		}
		Not = { has_global_variable = otto_traitor_lorraine_event } # only trigger once
		character:7813 = { NOT = { is_vassal_or_below_of = character:1282 } }
	}
	
	immediate = {
		title:d_upper_lorraine.holder = { save_scope_as = gislebert }
		set_global_variable = {
			name = otto_traitor_lorraine_event
			value = yes
		}
	}

	option = {# Interesting
		name = tapestry_hre.001.war
		ai_chance = { base = 100 }
		add_unpressed_claim = title:d_upper_lorraine
		add_unpressed_claim = title:d_lower_lorraine
		hidden_effect = {
			scope:gislebert = {
				trigger_event = {
					id = tapestry_hre.002
					days = { 5 10 }
				}
			}
		}
	}
	option = {# Interesting
		name = tapestry_hre.001.no_war
		ai_chance = { base = 0 }
	}
}
tapestry_hre.002 = {# Giselbert is informed about Otto's attack.
	type = character_event
	title = tapestry_hre.002.t
	desc = tapestry_hre.002.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}
	
	immediate = {
		title:k_east_francia.holder = { save_scope_as = otto }
	}

	option = {# Interesting
		name = tapestry_hre.002.a
		scope:otto = {
			add_opinion = { 
				target = root
				modifier = hate_opinion
				opinion = -40
			}
		}
	}

}
tapestry_hre.003 = {# Thankmar is given the chance of rebelling against Otto.
	type = character_event
	title = tapestry_hre.003.t
	desc = tapestry_hre.003.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}
	
	trigger = {
		current_year <= 940
		Not = { has_global_variable = thankmar_rebel_event } # only trigger once
		this = character:261394 # triggers for Thankmar
		character:1282 = {# we want to make sure Otto is alive
			is_alive = yes
		}
		character:261394 = {# we want to make sure Thankmar is alive
			is_alive = yes
		}
	}
	
	immediate = {
		set_global_variable = {
			name = thankmar_rebel_event
			value = yes
		}
		character:1282 = { save_scope_as = otto }
		character:261394 = { save_scope_as = thankmar}
	}

	option = {# Thankmar always rebels
		name = tapestry_hre.003.rebel
		ai_chance = { base = 100 }
		add_character_flag = temp_no_claim_war_cost
		start_war = {
			cb = thankmar_rebellion_cb
			target = character:1282
			claimant = scope:thankmar
			target_title = title:k_east_francia
		}
		remove_character_flag = temp_no_claim_war_cost
		hidden_effect = {
			set_global_variable = {
				name = thankmar_rebel_event
				value = yes
			}
			scope:otto = {# Otto is alerted of the rebellion
				trigger_event = {
					id = tapestry_hre.005
					days = { 5 10 }
				}
				every_vassal = {# vassals are allowed to join Thankmar's rebellion
					limit = {
						government_has_flag = government_is_feudal
						highest_held_title_tier >= tier_county
					}
					trigger_event = {
						id = tapestry_hre.004
						days = { 5 10 }
					}
				}
			}
		}
	}

	option = {# Interesting
		name = tapestry_hre.003.no_rebel
		ai_chance = { base = 0 }
	}

}
tapestry_hre.004 = {# Dukes are invited to join the rebellion.
	type = character_event
	title = tapestry_hre.004.t
	desc = tapestry_hre.004.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}
	
	immediate = {
		save_scope_as = rebelious_lord
		character:261394 = { save_scope_as = thankmar}
		random_character_war = {
			limit = { primary_attacker = scope:thankmar }
			save_scope_as = thankmar_invansion
		}
	}

	option = {# Rebeling
		name = tapestry_hre.004.rebel
		hidden_effect = {
			create_title_and_vassal_change = {
				type = swear_fealty
				save_scope_as = lord_joins_thankmar
			}
			scope:rebelious_lord = { 
				change_liege = {
					liege = scope:thankmar
					change = scope:lord_joins_thankmar
				}
			}
			resolve_title_and_vassal_change = scope:lord_joins_thankmar
		}

		ai_chance = {
			base = 050
			ai_value_modifier = {
				ai_honor = -0.25
			}
			modifier = {	# Weight up for disloyal.
				add = 1.5
				has_trait = disloyal
			}
			modifier = {	# Weight up for ambitious.
				add = 1.5
				has_trait = ambitious
			}
			modifier = {	# Weight up for dukes.
				add = 0.5
				highest_held_title_tier = tier_duchy
			}
		}


	}
	option = {# don't rebel
		name = tapestry_hre.004.no_rebel
		ai_chance = {
			base = 98
			ai_value_modifier = {
				ai_honor = 0.5
			}
			modifier = {	# Weight up for loyal.
				add = 1.5
				has_trait = loyal
			}
			modifier = {	# Weight up for content.
				add = 1.5
				has_trait = content
			}
			modifier = {	# Weight up for counts.
				add = 1.5
				highest_held_title_tier = tier_county
			}
		}
	}
}
tapestry_hre.005 = {# Otto is informed of Thankmar's betrayal.
	type = character_event
	title = tapestry_hre.005.t
	desc = tapestry_hre.005.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}
	
	option = {# Interesting
		name = tapestry_hre.005.a
	}

}
tapestry_hre.006 = {# Thankmar won his rebellion.
	type = character_event
	title = tapestry_hre.006.t
	desc = tapestry_hre.006.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}
	
	option = {# Legacy
		name = tapestry_hre.006.legacy
		ai_chance = { base = 75 }
		add_prestige = medium_prestige_gain

	}
	option = {# Old Ways
		name = tapestry_hre.006.old_ways
		add_prestige = major_prestige_gain
		ai_chance = { base = 25 }
		hidden_effect = {
			trigger_event = tapestry_hre.007
		}
	}

}
tapestry_hre.007 = {# A return to the old ways.
	type = character_event
	title = tapestry_hre.007.t
	desc = tapestry_hre.007.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}
	
	immediate = {
		thankmar_restored_old_kingdoms_effect = yes
	}
	option = {# Interesting
		name = tapestry_hre.007.a

	}

}
tapestry_hre.008 = {# Otto won against Thankmar's rebellion.
	type = character_event
	title = tapestry_hre.008.t
	desc = tapestry_hre.008.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}
	
	option = {# Interesting
		name = tapestry_hre.008.a
		add_prestige = medium_prestige_gain
		add_legitimacy = medium_legitimacy_gain
	}

}
tapestry_hre.009 = {# Choice given to Otto about enforcing his rights on the Italian lands.
	type = character_event
	title = tapestry_hre.009.t
	desc = tapestry_hre.009.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}
	
	trigger = {
		this = character:1282 # triggers for Otto
		character:7813 = {# we want to make sure Giselbert is alive
			is_alive = yes
		}
		current_year >= 940
		NOR = {# can't either be the emperor or own the Kingdom of Italy. 
			has_title = title:k_italy
			has_title = title:e_hre
		}
		is_at_war = no # Otto needs to be at peace to plan his ambitions southward
		Not = { has_global_variable = otto_italian_campaign_event } # only trigger once
	}
	
	immediate = {
		title:k_italy.holder = { save_scope_as = italian_king }
		character:140 = { save_scope_as = otto }		

		set_global_variable = {
			name = otto_italian_campaign_event
			value = yes
		}
	}

	option = {# Interesting
		name = tapestry_hre.009.war
		ai_chance = { base = 100 }

		add_character_flag = temp_no_claim_war_cost
		start_war = {
			cb = otto_italian_invansion_cb
			target = scope:italian_king
			claimant = scope:otto
			target_title = title:k_italy
		}
		remove_character_flag = temp_no_claim_war_cost
		hidden_effect = {
			scope:italian_king = {
				trigger_event = {
					id = tapestry_hre.010
					days = { 5 10 }
				}
			}
		}

	}

	option = {# Interesting
		name = tapestry_hre.009.war
		ai_chance = { base = 0 }
	}

}
tapestry_hre.010 = {# Italians informed about Otto's attack.
	type = character_event
	title = tapestry_hre.010.t
	desc = tapestry_hre.010.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}

	option = {# Interesting
		name = tapestry_hre.010.a
	}

}
#######################################
# Great Slav Uprising
#######################################
# Background Events leading up to the Rising
tapestry_hre.011 = {# Conversion Policy.
	type = character_event
	title = tapestry_hre.011.t
	desc = tapestry_hre.011.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}

	immediate = {
		character:168562 = { save_scope_as = gero }		
	}

	option = {# Conversion by the sword
		name = tapestry_hre.011.a
		ai_chance = { base = 100 } # its in Gero's nature
		every_county_in_region = {
			region = custom_europe_eastern_germany
			limit = {
				target_is_de_facto_liege_or_above = root.primary_title
			}
			add_county_modifier = {
				modifier = bryten_conversian_by_sword
				years = 30
			}
		}
		hidden_effect = {
			set_global_variable = {
				name = conversian_by_sword_variable
				value = yes
			}
			every_ruler = {# Slavic rulers are alerted
				limit = {
					is_landed = yes
					AND = {
						religion = religion:slavic_religion
						OR = {
							has_culture = culture:polabian
							has_culture = culture:sorbian
						}
					}
					NOT = { this = root }
					capital_province = { geographical_region = custom_europe_eastern_germany }
				}
				trigger_event = tapestry_hre.012
			}
			scope:gero = {
				trigger_event = {
					id = tapestry_hre.013
					days = { 5 10 }
				}
			}
		}
	}
	option = {# Interesting
		name = tapestry_hre.011.b
		ai_chance = { base = 0 }

		stress_impact = {
			base = major_stress_impact_gain
		}
	}
}
tapestry_hre.012 = {# Slavic Raids.
	type = character_event
	title = tapestry_hre.012.t
	desc = tapestry_hre.012.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}
	
	option = {# Interesting
		name = tapestry_hre.012.a
	}
}
tapestry_hre.013 = {# German Raids.
	type = character_event
	title = tapestry_hre.013.t
	desc = tapestry_hre.013.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}
	
	option = {# Interesting
		name = tapestry_hre.013.a
	}
}
tapestry_hre.014 = {# An Officials death.
	type = character_event
	title = tapestry_hre.014.t
	desc = tapestry_hre.014.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}
	
	trigger = {
		current_year >= 939
		has_global_variable = conversian_by_sword_variable
		Not = { has_global_variable = slavic_rising_officer_killed } # only trigger once
		this = character:168562 # triggers for Gero
	}
	
	immediate = {
		set_global_variable = {
			name = slavic_rising_officer_killed
			value = yes
		}
	}

	option = {# Murder Banquet!
		name = tapestry_hre.014.a
		ai_chance = { base = 100 }
		stress_impact = {
			vengeful = medium_stress_impact_loss
		}
		hidden_effect = {
			trigger_event = {
				id = tapestry_hre.015
				days = { 10 15 }
			}
		}
	}
	option = {# That will upset them more
		name = tapestry_hre.014.b
		ai_chance = { base = 0 }
		stress_impact = {
			vengeful = major_stress_impact_gain
		}
	}
}
tapestry_hre.015 = {# Gero's Banquet.
	type = character_event
	title = tapestry_hre.015.t
	desc = tapestry_hre.015.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}

	option = {# Interesting
		name = tapestry_hre.015.a
		
		hidden_effect = {
			every_vassal = {
				limit = {
					AND = {
						religion = religion:slavic_religion
						OR = {
							has_culture = culture:polabian
							has_culture = culture:sorbian
						}
					}
				}
				add_opinion = {
					target = root
					modifier = bryten_murderous_banquet
					opinion = -75
				}
			}
			every_courtier_or_guest = {
				limit = {
					AND = {
						religion = religion:slavic_religion
						OR = {
							has_culture = culture:polabian
							has_culture = culture:sorbian
						}
					}
				}
				add_opinion = {
					target = root
					modifier = bryten_murderous_banquet
					opinion = -75
				}
			}
		}
	}

	after = {
		hidden_effect = {
			every_ruler = {# First Rising
				limit = {
					AND = {
						religion = religion:slavic_religion
						has_culture = culture:polabian
						capital_province = { geographical_region = custom_europe_eastern_germany }
					}
				}
				trigger_event = tapestry_hre.016
			}	
		}
	}
}
tapestry_hre.016 = {# The slavs are alerted.
	type = character_event
	title = tapestry_hre.016.t
	desc = tapestry_hre.016.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}
	
	immediate = {
		title:k_east_francia.holder = { save_scope_as = german_king }
	}

	option = {# Declare War
		name = tapestry_hre.016.war
		add_character_flag = temp_no_claim_war_cost
		start_war = {
			cb = independence_war
			target = scope:german_king
		}
		remove_character_flag = temp_no_claim_war_cost	
	}
	option = {# Interesting
		name = tapestry_hre.016.no_war
	}
}
# The Rising itself
tapestry_hre.017 = {# The slavs Rise Up.
	hidden = yes

	trigger = {
		current_date >= 980.1.1
		NOT = { exists = global_var:great_slav_rising } # only fire once
		exists = global_var:conversian_by_sword_variable
	}
	
	immediate = {
		set_global_variable = {
			name = great_slav_rising
			value = yes
		}
		create_character = {
			template = bryten_polobian_rising_leader
			location = title:c_mecklenburg.title_province
			save_scope_as = polobian_rebel_leader
		}			
		start_slav_rising_polabian_effect = {
			TARGET_COUNTY = title:c_mecklenburg
			REBEL_LEADER = scope:polobian_rebel_leader
		}
	}

	after = {
		hidden_effect = {
			every_ruler = {# Slavic rulers are alerted
				limit = {
					is_landed = yes
					AND = {
						religion = religion:slavic_religion
						OR = {
							has_culture = culture:polabian
							has_culture = culture:sorbian
						}
					}
					NOT = { this = root }
					capital_province = { geographical_region = custom_europe_eastern_germany }
				}
				trigger_event = tapestry_hre.018
			}
			every_ruler = {# Marcher Lords are alerted
				limit = {
					is_landed = yes
					AND = {
						religion = religion:christianity_religion
						OR = {
							has_title = title:d_nordmark 
							has_title = title:d_ostmark 
							has_title = title:d_lausitz 
							has_title = title:d_meissen 
						}
					}
				}
				trigger_event = tapestry_hre.019
			}
		}
	}
}
tapestry_hre.018 = {# Alerting Slavic pagan rulers - they join in
	type = character_event
	title = tapestry_hre.018.t
	desc = tapestry_hre.018.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}

	option = {# Join the Rebellion!
		name = tapestry_hre.018.a
		ai_chance = { base = 100 }
		hidden_effect = {
			if = {# Polabians join the Polabian side
				random_character_war = { # We need to locate the war we just created, since we can't save it on creation
					limit = {
						using_cb = bryten_slav_rising_polobain_war
						primary_attacker = scope:polobian_rebel_leader # root
						primary_defender = scope:recipient
					}
					add_attacker = scope:actor
				}
			}
		}
	}
	option = {# Don't Join
		name = tapestry_hre.018.b
		ai_chance = { base = 0 }
	}
}
tapestry_hre.019 = {# Alerting the German Marcher Lords.
	type = character_event
	title = tapestry_hre.019.t
	desc = tapestry_hre.019.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}

	option = {# We shall defeat them
		name = tapestry_hre.019.a
	}
}
# The Aftermath
tapestry_hre.020 = {# The Slavs Win
	type = character_event
	title = tapestry_hre.020.t
	desc = tapestry_hre.020.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}


	option = {# Interesting
		name = tapestry_hre.020.a
		faith = {# Slavic faith gains favor for the war
			change_fervor = {
				value = minor_fervor_gain
				desc = bryten_slavic_rising_favor_slavs_gain
			}
		}
		every_held_county = {
			limit = { 
				OR = {
					culture = culture:polabian
					culture = culture:sorbian
				}
			}
			set_county_faith = faith:slavic_pagan
		}
		add_piety = medium_piety_gain
		every_county_in_region = {# if the harsh conversion modifer is stil on remove it.
			region = custom_europe_eastern_germany
			limit = {
				target_is_de_facto_liege_or_above = root.primary_title
				NOT = { religion = religion:christianity_religion }
			}
			remove_county_modifier = bryten_conversian_by_sword
		}
	}
}
tapestry_hre.021 = {# The Germans Win.
	type = character_event
	title = tapestry_hre.021.t
	desc = tapestry_hre.021.desc
	theme = realm
	left_portrait = {
		character = root
		animation = personality_bold
	}
	

	option = {# Interesting
		name = tapestry_hre.021.a
		faith = {# Catholicism gains favor for stopping them.
			change_fervor = {
				value = minor_fervor_gain
				desc = bryten_slavic_rising_favor_christian_gain
			}
		}
		add_piety = medium_piety_gain
	}
}
#######################################
# Ostsiedlung Events
#######################################
tapestry_hre.030 = {# Hidden tombola
	type = character_event
	hidden = yes

	immediate = {
		save_scope_as = current_ruler
		# Failsafe in case it isn't set already via the decision for some reason
		# Since I keep getting errors the variable isn't set
		# For some reason this doesn't work even though I literally set the variable here, but I'll keep it here just in case
		if = {
			limit = {
				is_ai = yes
				NOT = { has_variable = bryten_ostsiedlung_migrants_type }
			}
			random_list = {
				12 = {
					set_variable = {
						name = bryten_ostsiedlung_migrants_type
						value = flag:courtiers
					}
				}
				12 = {
					set_variable = {
						name = bryten_ostsiedlung_migrants_type
						value = flag:colonists
					}
				}
				12 = {
					set_variable = {
						name = bryten_ostsiedlung_migrants_type
						value = flag:mercenaries
					}
				}
				12 = {
					set_variable = {
						name = bryten_ostsiedlung_migrants_type
						value = flag:traders
					}
				}
				5 = {
					set_variable = {
						name = bryten_ostsiedlung_migrants
						value = flag:scholars
					}
				}
			}
		}
		# Determine original source of these Normans
		# If there are any Normans in Scandinavia or connected regions, go there first
		if = {
			limit = {
				any_county_in_region = {
					region = bryten_germania_region
					OR = {
						culture:saxon = { has_innovation = innovation_east_settling }
						culture:franconian = { has_innovation = innovation_east_settling }
						culture:swabian = { has_innovation = innovation_east_settling }
						culture:bavarian = { has_innovation = innovation_east_settling }
						culture:lothringian = { has_innovation = innovation_east_settling }
						culture:meissian = { has_innovation = innovation_east_settling }
					}
				}
			}
			every_county_in_region = {
				region = bryten_germania_region
				limit = {
					OR = {
						culture:saxon = { has_innovation = innovation_east_settling }
						culture:franconian = { has_innovation = innovation_east_settling }
						culture:swabian = { has_innovation = innovation_east_settling }
						culture:bavarian = { has_innovation = innovation_east_settling }
						culture:lothringian = { has_innovation = innovation_east_settling }
						culture:meissian = { has_innovation = innovation_east_settling }
					}
				}
				add_to_list = german_counties
			}
			random_in_list = {
				list = german_counties
				save_scope_as = county
			}
			scope:county.faith = {
				save_scope_as = german_faith
			}
			scope:county.culture = {
				save_scope_as = german_culture
			}
		}
		# If they cannot be found in Normandy and connected regions, search entire map
		else_if = {
			limit = {
				any_county = {
					# Normans have their own system
					OR = {
						culture:saxon = { has_innovation = innovation_east_settling }
						culture:franconian = { has_innovation = innovation_east_settling }
						culture:swabian = { has_innovation = innovation_east_settling }
						culture:bavarian = { has_innovation = innovation_east_settling }
						culture:lothringian = { has_innovation = innovation_east_settling }
						culture:meissian = { has_innovation = innovation_east_settling }
					}
				}
			}
			every_county = {
				limit = {
					# Normans have their own system
					OR = {
						culture:saxon = { has_innovation = innovation_east_settling }
						culture:franconian = { has_innovation = innovation_east_settling }
						culture:swabian = { has_innovation = innovation_east_settling }
						culture:bavarian = { has_innovation = innovation_east_settling }
						culture:lothringian = { has_innovation = innovation_east_settling }
						culture:meissian = { has_innovation = innovation_east_settling }
					}
				}
				add_to_list = german_counties
			}
			random_in_list = {
				list = german_counties
				save_scope_as = county
			}
			scope:county.faith = {
				save_scope_as = german_faith
			}
			scope:county.culture = {
				save_scope_as = german_culture
			}
		}
		# If Normans don't exist on the map for some reason
		else = {
			random_county_in_region = {
				region = bryten_germania_region
				save_scope_as = county
			}
			scope:county.faith = {
				save_scope_as = german_faith
			}
			scope:county.culture = {
				save_scope_as = german_culture
			}
		}

		# Do the proper setting up of characters as needed
		if = {
			limit = {
				var:bryten_ostsiedlung_migrants_type = flag:courtiers
			}
			# Generate first courtier option
			random_list = {
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_diplomat_template
						save_scope_as = courtier_1
					}
				}
				30 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_martial_template
						save_scope_as = courtier_1
					}
				}
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_stewardship_template
						save_scope_as = courtier_1
					}
				}
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_intrigue_template
						save_scope_as = courtier_1
					}
				}
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_learning_template
						save_scope_as = courtier_1
					}
				}
				30 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_prowess_template
						save_scope_as = courtier_1
					}
				}
			}
			# Generate second courtier option
			random_list = {
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_diplomat_template
						save_scope_as = courtier_2
					}
				}
				30 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_martial_template
						save_scope_as = courtier_2
					}
				}
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_stewardship_template
						save_scope_as = courtier_2
					}
				}
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_intrigue_template
						save_scope_as = courtier_2
					}
				}
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_learning_template
						save_scope_as = courtier_2
					}
				}
				30 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_prowess_template
						save_scope_as = courtier_2
					}
				}
			}
		}
		else_if = {
			limit = {
				var:bryten_ostsiedlung_migrants_type = flag:mercenaries
			}
			# Generate first courtier option
			random_list = {
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_diplomat_template
						save_scope_as = courtier_1
					}
				}
				30 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_martial_template
						save_scope_as = courtier_1
					}
				}
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_stewardship_template
						save_scope_as = courtier_1
					}
				}
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_intrigue_template
						save_scope_as = courtier_1
					}
				}
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_learning_template
						save_scope_as = courtier_1
					}
				}
				30 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_prowess_template
						save_scope_as = courtier_1
					}
				}
			}
			# Generate second courtier option
			random_list = {
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_diplomat_template
						save_scope_as = courtier_2
					}
				}
				30 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_martial_template
						save_scope_as = courtier_2
					}
				}
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_stewardship_template
						save_scope_as = courtier_2
					}
				}
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_intrigue_template
						save_scope_as = courtier_2
					}
				}
				10 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_learning_template
						save_scope_as = courtier_2
					}
				}
				30 = {
					create_character = {
						location = root.capital_province
						template = bryten_ostsiedlung_courtier_prowess_template
						save_scope_as = courtier_2
					}
				}
			}
		}
		# Generate generic german settler representative for other options
		else = {
			create_character = {
				location = root.capital_province
				template = bryten_ostsiedlung_generic_template
				save_scope_as = courtier_1
			}
			save_scope_as = courtier_2 # The ruler is not technically not a courtier, but this is for convenience
		}

		trigger_event = tapestry_hre.031

	}
}
tapestry_hre.031 = {# They come in peace
	type = character_event
	title = tapestry_hre.031.t
	desc = {
		desc = tapestry_hre.031.desc
		first_valid = {
			triggered_desc = {
				trigger = {
					var:bryten_ostsiedlung_migrants_type = flag:courtiers
				}
				desc = tapestry_hre.031.desc.courtiers
			}
			triggered_desc = {
				trigger = {
					var:bryten_ostsiedlung_migrants_type = flag:colonists
				}
				desc = tapestry_hre.031.desc.colonists
			}
			triggered_desc = {
				trigger = {
					var:bryten_ostsiedlung_migrants_type = flag:mercenaries
				}
				desc = tapestry_hre.031.desc.mercenaries
			}
			triggered_desc = {
				trigger = {
					var:bryten_ostsiedlung_migrants_type = flag:traders
				}
				desc = tapestry_hre.031.desc.traders
			}
			triggered_desc = {
				trigger = {
					var:bryten_ostsiedlung_migrants_type = flag:scholars
				}
				desc = tapestry_hre.031.desc.scholars
			}
		}
		desc = tapestry_hre.031.desc.conclusion
	}
	theme = realm
	
	left_portrait = {
		trigger = { root = { var:bryten_ostsiedlung_migrants_type = flag:courtiers } }
		character = scope:courtier_2
		animation = throne_room_bow_2
	}
	right_portrait = {
		character = scope:courtier_1
		animation = throne_room_bow_1
	}

	immediate = {

		# Final failsafe in case it isn't set already via the decision for some reason
		# Since I keep getting errors the variable isn't set
		# A lot of the stuff requires the previous event, but this is just to get rid of the stupid error log message		
		# For some reason this doesn't work even though I literally set the variable here, but I'll keep it here just in case
		if = {
			limit = {
				is_ai = yes
				NOT = { has_variable = bryten_ostsiedlung_migrants_type }
			}
			random_list = {
				12 = {
					set_variable = {
						name = bryten_ostsiedlung_migrants_type
						value = flag:courtiers
					}
				}
				12 = {
					set_variable = {
						name = bryten_ostsiedlung_migrants_type
						value = flag:colonists
					}
				}
				12 = {
					set_variable = {
						name = bryten_ostsiedlung_migrants_type
						value = flag:mercenaries
					}
				}
				12 = {
					set_variable = {
						name = bryten_ostsiedlung_migrants_type
						value = flag:traders
					}
				}
				12 = {
					set_variable = {
						name = bryten_ostsiedlung_migrants_type
						value = flag:scholars
					}
				}
			}
		}

		bryten_ostsiedlung_migrants_initial_setup_effect = yes
		bryten_ostsiedlung_migrants_main_effect = yes
		
	}
	
	option = { # Pick option 1
		name = tapestry_hre.031.a
		trigger = {
			var:bryten_ostsiedlung_migrants_type = flag:courtiers
		}
		add_courtier = scope:courtier_1
		hidden_effect = {
			scope:courtier_2 = {
				death = {
					death_reason = death_vanished
				}
			}			
		}
	}	
	option = { # Pick option 2
		name = tapestry_hre.031.b
		trigger = {
			var:bryten_ostsiedlung_migrants_type = flag:courtiers
		}
		add_courtier = scope:courtier_2
		hidden_effect = {
			scope:courtier_1 = {
				death = {
					death_reason = death_vanished
				}
			}			
		}
	}	
	option = { # Pick both
		name = tapestry_hre.031.c
		trigger = {
			var:bryten_ostsiedlung_migrants_type = flag:courtiers
			OR = {
				gold >= bryten_ostsiedlung_migrants_small_cost
				is_ai = no
			}
		}
		remove_short_term_gold = bryten_ostsiedlung_migrants_small_cost
		add_courtier = scope:courtier_1
		add_courtier = scope:courtier_2
	}	
	option = { # No courtiers to be picked
		name = tapestry_hre.031.d
		trigger = {
			NOT = { var:bryten_ostsiedlung_migrants_type = flag:courtiers }
		}
	}	
	option = { # Defend against borders?
		name = tapestry_hre.031.e
		if = {
			limit = {
				highest_held_title_tier = tier_county
			}
			add_prestige = -200
		}
		else_if = {
			limit = {
				highest_held_title_tier = tier_duchy
			}
			add_prestige = -400
		}
		else_if = {
			limit = {
				highest_held_title_tier = tier_kingdom
			}
			add_prestige = -600
		}
		else_if = {
			limit = {
				highest_held_title_tier = tier_empire
			}
			add_prestige = -800
		}
		# Diplomacy
		if = {
			limit = {
				var:bryten_ostsiedlung_migrants_type = flag:colonists
			}
			duel = {
				skill = intrigue
				target = scope:courtier_1
				10 = {
					custom_tooltip = tapestry_hre.031.e.failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -0.9
					}
					set_variable = {
						name = bryten_ostsiedlung_provide_further_help
						value = flag:no
					}
				}
				10 = {
					custom_tooltip = tapestry_hre.031.e.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 0.9
					}
					set_variable = {
						name = bryten_ostsiedlung_further_help
						value = flag:yes
					}
				}
			}
		}
		# Martial
		else_if = {
			limit = {
				var:bryten_ostsiedlung_migrants_type = flag:mercenaries
			}
			duel = {
				skill = martial
				target = scope:courtier_1
				10 = {
					custom_tooltip = tapestry_hre.031.e.failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -0.9
					}
					set_variable = {
						name = bryten_ostsiedlung_provide_further_help
						value = flag:no
					}
				}
				10 = {
					custom_tooltip = tapestry_hre.031.e.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 0.9
					}
					set_variable = {
						name = bryten_ostsiedlung_provide_further_help
						value = flag:yes
					}
				}
			}
		}
		# Stewardship
		else_if = {
			limit = {
				var:bryten_ostsiedlung_migrants_type = flag:traders
			}
			duel = {
				skill = stewardship
				target = scope:courtier_1
				10 = {
					custom_tooltip = tapestry_hre.031.e.failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -0.9
					}
					set_variable = {
						name = bryten_ostsiedlung_provide_further_help
						value = flag:no
					}
				}
				10 = {
					custom_tooltip = tapestry_hre.031.e.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 0.9
					}
					set_variable = {
						name = bryten_ostsiedlung_provide_further_help
						value = flag:yes
					}
				}
			}
		}
		# Intrigue
		else_if = {
			limit = {
				var:bryten_ostsiedlung_migrants_type = flag:courtiers
			}
			duel = {
				skill = intrigue
				target = scope:courtier_1
				10 = {
					custom_tooltip = tapestry_hre.031.e.failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -0.9
					}
					set_variable = {
						name = bryten_ostsiedlung_provide_further_help
						value = flag:no
					}
				}
				10 = {
					custom_tooltip = tapestry_hre.031.e.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 0.9
					}
					set_variable = {
						name = bryten_ostsiedlung_provide_further_help
						value = flag:yes
					}
				}
			}
		}
		# Learning
		else_if = {
			limit = {
				var:bryten_ostsiedlung_migrants_type = flag:scholars
			}
			duel = {
				skill = learning
				target = scope:courtier_1
				10 = {
					custom_tooltip = tapestry_hre.031.e.failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -0.9
					}
					set_variable = {
						name = bryten_ostsiedlung_provide_further_help
						value = flag:no
					}
				}
				10 = {
					custom_tooltip = tapestry_hre.031.e.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 0.9
					}
					set_variable = {
						name = bryten_ostsiedlung_provide_further_help
						value = flag:yes
					}
				}
			}
		}
		trigger_event = tapestry_hre.032
	}		

	after = {

		if = {
			limit = {
				NOT = { has_variable = bryten_ostsiedlung_provide_further_help }
			}
			if = {
				limit = {
					scope:courtier_1 = {
						has_character_flag = single_combat_duel_armor
					}
				}
				scope:courtier_1 = {
					remove_character_flag = single_combat_duel_armor
				}
			}
			if = {
				limit = {
					NOT = {
						var:bryten_ostsiedlung_migrants_type = flag:courtiers
					}
				}
				hidden_effect = {
					scope:courtier_1 = {
						death = {
							death_reason = death_vanished
						}
					}			
				}
			}
			if = {
				limit = { has_variable = bryten_ostsiedlung_migrants_type }
				remove_variable = bryten_ostsiedlung_migrants_type
			}
		}
	}

}
tapestry_hre.032 = {# Ask them to provide additional assistance
	type = character_event
	title = tapestry_hre.032.t
	desc = {
		desc = tapestry_hre.032.desc.intro
		first_valid = {
			triggered_desc = {
				trigger = {
					var:bryten_ostsiedlung_provide_further_help = flag:no
				}
				desc = tapestry_hre.032.desc.no
			}
			triggered_desc = {
				trigger = {
					var:bryten_ostsiedlung_provide_further_help = flag:yes
				}
				desc = tapestry_hre.032.desc.yes
			}
		}
	}
	theme = realm
	
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = { root = { var:bryten_ostsiedlung_provide_further_help = flag:yes } }
			animation = happiness
		}
		triggered_animation = {
			trigger = { root = { var:bryten_ostsiedlung_provide_further_help = flag:no } }
			animation = schadenfreude
		}
	}	
	right_portrait = {
		character = scope:courtier_1
		triggered_animation = {
			trigger = { root = { var:bryten_ostsiedlung_provide_further_help = flag:yes } }
			animation = personality_bold
		}
		triggered_animation = {
			trigger = { root = { var:bryten_ostsiedlung_provide_further_help = flag:no } }
			animation = shame
		}
	}

	lower_center_portrait = {
		character = scope:courtier_2
		trigger = { var:bryten_ostsiedlung_migrants_type = flag:courtiers }
	}

	immediate = {
		if = {
			limit = {
				var:bryten_ostsiedlung_provide_further_help = flag:yes
			}
			random_list = {
				20 = {
					add_character_modifier = {
						modifier = bryten_ostsiedlung_long_term_assistance
						years = 5
					}
				}
				20 = {
					add_character_modifier = {
						modifier = bryten_ostsiedlung_long_term_assistance
						years = 10
					}
				}
				10 = {
					add_character_modifier = {
						modifier = bryten_ostsiedlung_long_term_assistance
						years = 15
					}
				}
				10 = {
					add_character_modifier = {
						modifier = bryten_ostsiedlung_long_term_assistance
						years = 20
					}
				}
			}
		}		
	}
		
	option = { # Defend against borders?
		name = tapestry_hre.032.a
		trigger = {
			var:bryten_ostsiedlung_provide_further_help = flag:yes
			NOT = { var:bryten_ostsiedlung_migrants_type = flag:courtiers }
		}
	}		
	option = { # Defend against borders?
		name = tapestry_hre.032.b
		trigger = {
			NOT = {
				var:bryten_ostsiedlung_provide_further_help = flag:yes
			}
			NOT = { var:bryten_ostsiedlung_migrants_type = flag:courtiers }
		}
	}		
	option = { # Courtier 1
		name = tapestry_hre.032.c
		trigger = {
			var:bryten_ostsiedlung_migrants_type = flag:courtiers
		}
		add_courtier = scope:courtier_1
		hidden_effect = {
			scope:courtier_2 = {
				death = {
					death_reason = death_vanished
				}
			}			
		}
	}		
	option = { # Courtier 2
		name = tapestry_hre.032.d
		trigger = {
			var:bryten_ostsiedlung_migrants_type = flag:courtiers
		}
		add_courtier = scope:courtier_2
		hidden_effect = {
			scope:courtier_2 = {
				death = {
					death_reason = death_vanished
				}
			}			
		}
	}		
	option = { # Courtier 1 and Courtier 2
		name = tapestry_hre.032.e
		trigger = {
			var:bryten_ostsiedlung_migrants_type = flag:courtiers
			OR = {
				gold >= bryten_ostsiedlung_migrants_small_cost
				is_ai = no
			}
		}
		remove_short_term_gold = bryten_ostsiedlung_migrants_small_cost
		add_courtier = scope:courtier_1
		add_courtier = scope:courtier_2
	}

	after = {		
		if = {
			limit = {
				scope:courtier_1 = {
					has_character_flag = single_combat_duel_armor
				}
			}
			scope:courtier_1 = {
				remove_character_flag = single_combat_duel_armor
			}
		}
		if = {
			limit = {
				NOT = { var:bryten_ostsiedlung_migrants_type = flag:courtiers }
			}
			hidden_effect = {
				scope:courtier_1 = {
					death = {
						death_reason = death_vanished
					}
				}			
			}
		}
		if = {
			limit = { has_variable = bryten_ostsiedlung_migrants_type }
			remove_variable = bryten_ostsiedlung_migrants_type
		}
	}
}
# Flavor Events

#######################################
# Cultures forming
#######################################
# meissian
tapestry_hre.050 = {# meissian Culture forming
	hidden = yes
	
	immediate = {
		# Save scopes for player notification events.
		culture:franconian = { save_scope_as = norman }
		culture:meissian = {
			# 'Hybridize' this culture by copying innovations from parent cultures. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:franconian
			get_all_innovations_from = culture:sorbian

			# Save scope for player notification events.
			save_scope_as = meissian
		}

		# German Counties in Sorbia will convert to Messien
		culture:franconian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_meissien_region }
				}
				add_to_list = meissian_counties
			}
		}
		culture:swabian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_meissien_region }
				}
				add_to_list = meissian_counties
			}
		}
		culture:bavarian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_meissien_region }
				}
				add_to_list = meissian_counties
			}
		}
		culture:saxon = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_meissien_region }
				}
				add_to_list = meissian_counties
			}
		}
		# Convert the franconian counties to Messian
		every_in_list = {
			list = meissian_counties
			limit = {
				# Same-culture players get an event informing them of their county's conversion *before* it happens (for their provinces only).
				NOT = {
					holder = {
						OR = {
							AND = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_meissien_region }
							}
							any_liege_or_above = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_meissien_region }
							}
						}
					}
				}
			}
						
			# All franconian counties in Sorbia become Meissian
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:saxon
				NEW_CULTURE = culture:meissian
				REGION = bryten_ostsiedlung_meissien_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:franconian
				NEW_CULTURE = culture:meissian
				REGION = bryten_ostsiedlung_meissien_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:swabian
				NEW_CULTURE = culture:meissian
				REGION = bryten_ostsiedlung_meissien_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:bavarian
				NEW_CULTURE = culture:meissian
				REGION = bryten_ostsiedlung_meissien_region
			}
		}

		# franconian Rulers get the next decision
		every_ruler = {
			limit = {
				AND = {
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
					is_landed = yes			
					capital_province = { geographical_region = bryten_ostsiedlung_meissien_region }
				}
			}
			trigger_event = tapestry_hre.051
		}

		# Send the appropraite notification event to each player.
		every_player = {
			if = {
				limit = {
					is_ai = no
					save_temporary_scope_as = player
					any_in_list = {
						list = meissian_counties
						holder = { is_within_diplo_range = { CHARACTER = scope:player } }
					}
				}
				trigger_event = tapestry_hre.052
			}
		}
	}
}
tapestry_hre.051 = {# German Ruled Realms in Sorbia
	type = character_event
	title = tapestry_hre.051.t
	desc = tapestry_hre.051.desc
	theme = culture_change

	trigger = {# safety checks
		OR = {
			has_culture	= culture:saxon
			has_culture	= culture:swabian
			has_culture	= culture:bavarian
			has_culture	= culture:franconian
		}
		is_landed = yes		
		capital_province = { geographical_region = bryten_ostsiedlung_meissien_region }
	}	
	option = {# Embrace Meissian
		name = tapestry_hre.051.embrace
		show_as_tooltip = {
			set_culture = culture:meissian
			every_in_list = {
				list = meissian_counties
				limit = {
					holder.top_liege = root.top_liege
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
				}
				set_county_culture = culture:meissian
			}
		}
		# Convert the German counties to Meissian
		every_in_list = {
			list = meissian_counties
			limit = {
				holder.top_liege = root.top_liege
				OR = {
					has_culture	= culture:saxon
					has_culture	= culture:swabian
					has_culture	= culture:bavarian
					has_culture	= culture:franconian
				}
			}	
			# All German counties in Sorbia become Meissian
			hidden_effect = {
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:saxon
					NEW_CULTURE = culture:meissian
					REGION = bryten_ostsiedlung_meissien_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:franconian
					NEW_CULTURE = culture:meissian
					REGION = bryten_ostsiedlung_meissien_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:swabian
					NEW_CULTURE = culture:meissian
					REGION = bryten_ostsiedlung_meissien_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:bavarian
					NEW_CULTURE = culture:meissian
					REGION = bryten_ostsiedlung_meissien_region
				}
			}
		}
	}
}
tapestry_hre.052 = {# Let other players know that meissian has been created
	type = character_event
	title = tapestry_hre.052.t
	desc = tapestry_hre.052.desc
	theme = culture_change

	left_portrait = {
		character = root
		animation = personality_rational
	}

	option = {
		name = tapestry_hre.052.a
	}
}
# pommerisch
tapestry_hre.053 = {# pommerisch Culture forming
	hidden = yes
	
	immediate = {
		# Save scopes for player notification events.
		culture:franconian = { save_scope_as = franconian }
		culture:pommerisch = {
			# 'Hybridize' this culture by copying innovations from parent cultures. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:pommeranian
			get_all_innovations_from = culture:franconian

			# Save scope for player notification events.
			save_scope_as = pommerisch
		}

		# German counties in Pommerania will convert to pommerisch
		culture:saxon = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_pommerisch_region }
				}
				add_to_list = pommerisch_counties
			}
		}
		culture:franconian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_pommerisch_region }
				}
				add_to_list = pommerisch_counties
			}
		}
		culture:swabian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_pommerisch_region }
				}
				add_to_list = pommerisch_counties
			}
		}
		culture:bavarian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_pommerisch_region }
				}
				add_to_list = pommerisch_counties
			}
		}
		# Convert the German counties to anglo-norse
		every_in_list = {
			list = pommerisch_counties
			limit = {
				# Same-culture players get an event informing them of their county's conversion *before* it happens (for their provinces only).
				NOT = {
					holder = {
						OR = {
							AND = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_pommerisch_region }
							}
							any_liege_or_above = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_pommerisch_region }
							}
						}
					}
				}
			}
						
			# All German counties in Pommernia become pommerisch
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:saxon
				NEW_CULTURE = culture:pommerisch
				REGION = bryten_ostsiedlung_pommerisch_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:franconian
				NEW_CULTURE = culture:pommerisch
				REGION = bryten_ostsiedlung_pommerisch_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:swabian
				NEW_CULTURE = culture:pommerisch
				REGION = bryten_ostsiedlung_pommerisch_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:bavarian
				NEW_CULTURE = culture:pommerisch
				REGION = bryten_ostsiedlung_pommerisch_region
			}
		}

		# Norman Rulers get the next decision
		every_ruler = {
			limit = {
				AND = {
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
					is_landed = yes			
					capital_province = { geographical_region = bryten_ostsiedlung_pommerisch_region }
				}
			}
			trigger_event = tapestry_hre.054
		}

		# Send the appropraite notification event to each player.
		every_player = {
			if = {
				limit = {
					is_ai = no
					save_temporary_scope_as = player
					any_in_list = {
						list = pommerisch_counties
						holder = { is_within_diplo_range = { CHARACTER = scope:player } }
					}
				}
				trigger_event = tapestry_hre.055
			}
		}
	}
}
tapestry_hre.054 = {# German Ruled Realms in Pommerania
	type = character_event
	title = tapestry_hre.054.t
	desc = tapestry_hre.054.desc
	theme = culture_change

	trigger = {# safety checks
		OR = {
			has_culture	= culture:saxon
			has_culture	= culture:swabian
			has_culture	= culture:bavarian
			has_culture	= culture:franconian
		}
		is_landed = yes		
		capital_province = { geographical_region = bryten_ostsiedlung_pommerisch_region }
	}
	
	option = {# Embrace pommerisch
		name = tapestry_hre.054.embrace
		show_as_tooltip = {
			set_culture = culture:pommerisch
			every_in_list = {
				list = pommerisch_counties
				limit = {
					holder.top_liege = root.top_liege
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
				}
				set_county_culture = culture:pommerisch
			}
		}
		# Convert the German counties to pommerisch
		every_in_list = {
			list = pommerisch_counties
			limit = {
				holder.top_liege = root.top_liege
				OR = {
					has_culture	= culture:saxon
					has_culture	= culture:swabian
					has_culture	= culture:bavarian
					has_culture	= culture:franconian
				}
			}	
			# All German counties in Pommerania become pommerisch
			hidden_effect = {
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:saxon
					NEW_CULTURE = culture:pommerisch
					REGION = bryten_ostsiedlung_pommerisch_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:franconian
					NEW_CULTURE = culture:pommerisch
					REGION = bryten_ostsiedlung_pommerisch_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:swabian
					NEW_CULTURE = culture:pommerisch
					REGION = bryten_ostsiedlung_pommerisch_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:bavarian
					NEW_CULTURE = culture:pommerisch
					REGION = bryten_ostsiedlung_pommerisch_region
				}
			}
		}
	}
}
tapestry_hre.055 = {# Let other players know that pommerisch has been created
	type = character_event
	title = tapestry_hre.055.t
	desc = tapestry_hre.055.desc
	theme = culture_change

	left_portrait = {
		character = root
		animation = personality_rational
	}

	option = {
		name = tapestry_hre.055.a
	}
}
# markish
tapestry_hre.056 = {# markish Culture forming
	hidden = yes
	
	immediate = {
		# Save scopes for player notification events.
		culture:franconian = { save_scope_as = franconian }
		culture:markish = {
			# 'Hybridize' this culture by copying innovations from parent cultures. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:polabian
			get_all_innovations_from = culture:franconian

			# Save scope for player notification events.
			save_scope_as = markish
		}
		# German counties in Southernitaly will convert to markish
		culture:saxon = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_markish_region }
				}
				add_to_list = markish_counties
			}
		}
		culture:swabian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_markish_region }
				}
				add_to_list = markish_counties
			}
		}
		culture:bavarian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_markish_region }
				}
				add_to_list = markish_counties
			}
		}
		# Convert the German counties to anglo-norse
		every_in_list = {
			list = markish_counties
			limit = {
				# Same-culture players get an event informing them of their county's conversion *before* it happens (for their provinces only).
				NOT = {
					holder = {
						OR = {
							AND = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_markish_region }
							}
							any_liege_or_above = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_markish_region }
							}
						}
					}
				}
			}
						
			# All German counties in Sicily become sicilian
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:saxon
				NEW_CULTURE = culture:markish
				REGION = bryten_ostsiedlung_markish_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:franconian
				NEW_CULTURE = culture:markish
				REGION = bryten_ostsiedlung_markish_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:swabian
				NEW_CULTURE = culture:markish
				REGION = bryten_ostsiedlung_markish_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:bavarian
				NEW_CULTURE = culture:markish
				REGION = bryten_ostsiedlung_markish_region
			}
		}
		# German Rulers get the next decision
		every_ruler = {
			limit = {
				AND = {
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
					is_landed = yes			
					capital_province = { geographical_region = bryten_ostsiedlung_markish_region }
				}
			}
			trigger_event = tapestry_hre.057
		}
		# Send the appropraite notification event to each player.
		every_player = {
			if = {
				limit = {
					is_ai = no
					save_temporary_scope_as = player
					any_in_list = {
						list = markish_counties
						holder = { is_within_diplo_range = { CHARACTER = scope:player } }
					}
				}
				trigger_event = tapestry_hre.058
			}
		}
	}
}
tapestry_hre.057 = {# German Ruled Realms in the Mark
	type = character_event
	title = tapestry_hre.057.t
	desc = tapestry_hre.057.desc
	theme = culture_change

	trigger = {# safety checks
		OR = {
			has_culture	= culture:saxon
			has_culture	= culture:swabian
			has_culture	= culture:bavarian
			has_culture	= culture:franconian
		}
		is_landed = yes		
		capital_province = { geographical_region = bryten_ostsiedlung_markish_region }
	}
	
	option = {# Embrace Markish
		name = tapestry_hre.057.embrace
		show_as_tooltip = {
			set_culture = culture:markish
			every_in_list = {
				list = markish_counties
				limit = {
					holder.top_liege = root.top_liege
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
				}
				set_county_culture = culture:markish
			}
		}
		# Convert the German counties to markish
		every_in_list = {
			list = markish_counties
			limit = {
				holder.top_liege = root.top_liege
				OR = {
					has_culture	= culture:saxon
					has_culture	= culture:swabian
					has_culture	= culture:bavarian
					has_culture	= culture:franconian
				}
			}	
			# All German counties in Southernitaly become Sicilian
			hidden_effect = {
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:saxon
					NEW_CULTURE = culture:markish
					REGION = bryten_ostsiedlung_markish_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:franconian
					NEW_CULTURE = culture:markish
					REGION = bryten_ostsiedlung_markish_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:swabian
					NEW_CULTURE = culture:markish
					REGION = bryten_ostsiedlung_markish_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:bavarian
					NEW_CULTURE = culture:markish
					REGION = bryten_ostsiedlung_markish_region
				}
			}
		}
	}
}
tapestry_hre.058 = {# Let other players know that markish has been created
	type = character_event
	title = tapestry_hre.058.t
	desc = tapestry_hre.058.desc
	theme = culture_change

	left_portrait = {
		character = root
		animation = personality_rational
	}

	option = {
		name = tapestry_hre.058.a
	}
}
# zipser
tapestry_hre.059 = {# zipser Culture forming
	hidden = yes
	
	immediate = {
		# Save scopes for player notification events.
		culture:franconian = { save_scope_as = franconian }
		culture:zipser = {
			# 'Hybridize' this culture by copying innovations from parent cultures. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:franconian
			get_all_innovations_from = culture:nitran

			# Save scope for player notification events.
			save_scope_as = sicilian
		}

		# German counties in Carpathian Mountains will convert to zipser
		culture:saxon = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_zipser_region }
				}
				add_to_list = zipser_counties
			}
		}
		culture:franconian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_zipser_region }
				}
				add_to_list = zipser_counties
			}
		}
		culture:swabian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_zipser_region }
				}
				add_to_list = zipser_counties
			}
		}
		culture:bavarian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_zipser_region }
				}
				add_to_list = zipser_counties
			}
		}
		# Convert the German counties to anglo-norse
		every_in_list = {
			list = zipser_counties
			limit = {
				# Same-culture players get an event informing them of their county's conversion *before* it happens (for their provinces only).
				NOT = {
					holder = {
						OR = {
							AND = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_zipser_region }
							}
							any_liege_or_above = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_zipser_region }
							}
						}
					}
				}
			}
						
			# All German counties in Sicily become sicilian
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:saxon
				NEW_CULTURE = culture:zipser
				REGION = bryten_ostsiedlung_zipser_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:franconian
				NEW_CULTURE = culture:zipser
				REGION = bryten_ostsiedlung_zipser_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:swabian
				NEW_CULTURE = culture:zipser
				REGION = bryten_ostsiedlung_zipser_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:bavarian
				NEW_CULTURE = culture:zipser
				REGION = bryten_ostsiedlung_zipser_region
			}
		}

		# Norman Rulers get the next decision
		every_ruler = {
			limit = {
				AND = {
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
					is_landed = yes			
					capital_province = { geographical_region = bryten_ostsiedlung_zipser_region }
				}
			}
			trigger_event = tapestry_hre.060
		}

		# Send the appropraite notification event to each player.
		every_player = {
			if = {
				limit = {
					is_ai = no
					save_temporary_scope_as = player
					any_in_list = {
						list = zipser_counties
						holder = { is_within_diplo_range = { CHARACTER = scope:player } }
					}
				}
				trigger_event = tapestry_hre.061
			}
		}
	}
}
tapestry_hre.060 = {# German Ruled Realms in the Carpathians
	type = character_event
	title = tapestry_hre.060.t
	desc = tapestry_hre.060.desc
	theme = culture_change

	trigger = {# safety checks
		OR = {
			has_culture	= culture:saxon
			has_culture	= culture:swabian
			has_culture	= culture:bavarian
			has_culture	= culture:franconian
		}
		is_landed = yes		
		capital_province = { geographical_region = bryten_ostsiedlung_zipser_region }
	}
	
	option = {# Embrace zipser
		name = tapestry_hre.060.embrace
		show_as_tooltip = {
			set_culture = culture:zipser
			every_in_list = {
				list = zipser_counties
				limit = {
					holder.top_liege = root.top_liege
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
				}
				set_county_culture = culture:zipser
			}
		}
		# Convert the norman counties to zipser
		every_in_list = {
			list = zipser_counties
			limit = {
				holder.top_liege = root.top_liege
				OR = {
					has_culture	= culture:saxon
					has_culture	= culture:swabian
					has_culture	= culture:bavarian
					has_culture	= culture:franconian
				}
			}	
			# All German counties in Southernitaly become Sicilian
			hidden_effect = {
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:saxon
					NEW_CULTURE = culture:zipser
					REGION = bryten_ostsiedlung_zipser_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:franconian
					NEW_CULTURE = culture:zipser
					REGION = bryten_ostsiedlung_zipser_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:swabian
					NEW_CULTURE = culture:zipser
					REGION = bryten_ostsiedlung_zipser_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:bavarian
					NEW_CULTURE = culture:zipser
					REGION = bryten_ostsiedlung_zipser_region
				}
			}
		}
	}
}
tapestry_hre.061 = {# Let other players know that zipser has been created
	type = character_event
	title = tapestry_hre.061.t
	desc = tapestry_hre.061.desc
	theme = culture_change

	left_portrait = {
		character = root
		animation = personality_rational
	}

	option = {
		name = tapestry_hre.061.a
	}
}
# transylvanian_saxons
tapestry_hre.062 = {# Transylvanian Saxons Culture forming
	hidden = yes
	
	immediate = {
		# Save scopes for player notification events.
		culture:franconian = { save_scope_as = franconian }
		culture:transylvanian_saxons = {
			# 'Hybridize' this culture by copying innovations from parent cultures. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:hungarian
			get_all_innovations_from = culture:franconian

			# Save scope for player notification events.
			save_scope_as = transylvanian_saxons
		}

		# German counties in Southernitaly will convert to Sicilian
		culture:saxon = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_transylvanian_saxons_region }
				}
				add_to_list = transylvanian_saxons_counties
			}
		}
		culture:franconian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_transylvanian_saxons_region }
				}
				add_to_list = transylvanian_saxons_counties
			}
		}
		culture:swabian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_transylvanian_saxons_region }
				}
				add_to_list = transylvanian_saxons_counties
			}
		}
		culture:bavarian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_transylvanian_saxons_region }
				}
				add_to_list = transylvanian_saxons_counties
			}
		}						
		# Convert the German counties to anglo-norse
		every_in_list = {
			list = transylvanian_saxons_counties
			limit = {
				# Same-culture players get an event informing them of their county's conversion *before* it happens (for their provinces only).
				NOT = {
					holder = {
						OR = {
							AND = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_transylvanian_saxons_region }
							}
							any_liege_or_above = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_transylvanian_saxons_region }
							}
						}
					}
				}
			}
						
			# All German counties in Transylvania become franconian
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:saxon
				NEW_CULTURE = culture:transylvanian_saxons
				REGION = bryten_ostsiedlung_transylvanian_saxons_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:franconian
				NEW_CULTURE = culture:transylvanian_saxons
				REGION = bryten_ostsiedlung_transylvanian_saxons_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:swabian
				NEW_CULTURE = culture:transylvanian_saxons
				REGION = bryten_ostsiedlung_transylvanian_saxons_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:bavarian
				NEW_CULTURE = culture:transylvanian_saxons
				REGION = bryten_ostsiedlung_transylvanian_saxons_region
			}
		}

		# Norman Rulers get the next decision
		every_ruler = {
			limit = {
				AND = {
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
					is_landed = yes			
					capital_province = { geographical_region = bryten_ostsiedlung_transylvanian_saxons_region }
				}
			}
			trigger_event = tapestry_hre.063
		}

		# Send the appropraite notification event to each player.
		every_player = {
			if = {
				limit = {
					is_ai = no
					save_temporary_scope_as = player
					any_in_list = {
						list = sicilian_counties
						holder = { is_within_diplo_range = { CHARACTER = scope:player } }
					}
				}
				trigger_event = tapestry_hre.064
			}
		}
	}
}
tapestry_hre.063 = {# Norman Ruled Realms in Transylvania
	type = character_event
	title = tapestry_hre.063.t
	desc = tapestry_hre.063.desc
	theme = culture_change

	trigger = {# safety checks
		OR = {
			has_culture	= culture:saxon
			has_culture	= culture:swabian
			has_culture	= culture:bavarian
			has_culture	= culture:franconian
		}
		is_landed = yes		
		capital_province = { geographical_region = bryten_ostsiedlung_transylvanian_saxons_region }
	}
	
	option = {# Embrace transylvanian_saxons
		name = tapestry_hre.063.embrace
		show_as_tooltip = {
			set_culture = culture:transylvanian_saxons
			every_in_list = {
				list = anglo_saxon_counties
				limit = {
					holder.top_liege = root.top_liege
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
				}
				set_county_culture = culture:transylvanian_saxons
			}
		}
		# Convert the norman counties to transylvanian_saxons
		every_in_list = {
			list = anglo_saxon_counties
			limit = {
				holder.top_liege = root.top_liege
				OR = {
					has_culture	= culture:saxon
					has_culture	= culture:swabian
					has_culture	= culture:bavarian
					has_culture	= culture:franconian
				}
			}	
			# All German counties in Translyvania become transylvanian_saxons
			hidden_effect = {
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:saxon
					NEW_CULTURE = culture:transylvanian_saxons
					REGION = bryten_ostsiedlung_transylvanian_saxons_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:franconian
					NEW_CULTURE = culture:transylvanian_saxons
					REGION = bryten_ostsiedlung_transylvanian_saxons_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:swabian
					NEW_CULTURE = culture:transylvanian_saxons
					REGION = bryten_ostsiedlung_transylvanian_saxons_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:bavarian
					NEW_CULTURE = culture:transylvanian_saxons
					REGION = bryten_ostsiedlung_transylvanian_saxons_region
				}
			}
		}
	}
}
tapestry_hre.064 = {# Let other players know that Transylvanian Saxons has been created
	type = character_event
	title = tapestry_hre.064.t
	desc = tapestry_hre.064.desc
	theme = culture_change

	left_portrait = {
		character = root
		animation = personality_rational
	}

	option = {
		name = tapestry_hre.064.a
	}
}
# prussisch
tapestry_hre.065 = {# Prussisch Culture forming
	hidden = yes
	
	immediate = {
		# Save scopes for player notification events.
		culture:franconian = { save_scope_as = franconian }
		culture:prussisch = {
			# 'Hybridize' this culture by copying innovations from parent cultures. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:franconian
			get_all_innovations_from = culture:prussian

			# Save scope for player notification events.
			save_scope_as = prussisch
		}

		# German counties in Southernitaly will convert to Sicilian
		culture:saxon = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_prussisch_region }
				}
				add_to_list = prussisch_counties
			}
		}
		culture:franconian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_prussisch_region }
				}
				add_to_list = prussisch_counties
			}
		}
		culture:swabian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_prussisch_region }
				}
				add_to_list = prussisch_counties
			}
		}
		culture:bavarian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_prussisch_region }
				}
				add_to_list = prussisch_counties
			}
		}
		# Convert the German counties to anglo-norse
		every_in_list = {
			list = sicilian_counties
			limit = {
				# Same-culture players get an event informing them of their county's conversion *before* it happens (for their provinces only).
				NOT = {
					holder = {
						OR = {
							AND = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_prussisch_region }
							}
							any_liege_or_above = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_prussisch_region }
							}
						}
					}
				}
			}
						
			# All German counties in Sicily become sicilian
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:saxon
				NEW_CULTURE = culture:prussisch
				REGION = bryten_ostsiedlung_prussisch_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:franconian
				NEW_CULTURE = culture:prussisch
				REGION = bryten_ostsiedlung_prussisch_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:swabian
				NEW_CULTURE = culture:prussisch
				REGION = bryten_ostsiedlung_prussisch_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:bavarian
				NEW_CULTURE = culture:prussisch
				REGION = bryten_ostsiedlung_prussisch_region
			}
		}

		# Norman Rulers get the next decision
		every_ruler = {
			limit = {
				AND = {
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
					is_landed = yes			
					capital_province = { geographical_region = bryten_ostsiedlung_prussisch_region }
				}
			}
			trigger_event = tapestry_hre.066
		}

		# Send the appropraite notification event to each player.
		every_player = {
			if = {
				limit = {
					is_ai = no
					save_temporary_scope_as = player
					any_in_list = {
						list = sicilian_counties
						holder = { is_within_diplo_range = { CHARACTER = scope:player } }
					}
				}
				trigger_event = tapestry_hre.067
			}
		}
	}
}
tapestry_hre.066 = {# German Ruled Realms in Prussia
	type = character_event
	title = tapestry_hre.066.t
	desc = tapestry_hre.066.desc
	theme = culture_change

	trigger = {# safety checks
		OR = {
			has_culture	= culture:saxon
			has_culture	= culture:swabian
			has_culture	= culture:bavarian
			has_culture	= culture:franconian
		}
		is_landed = yes		
		capital_province = { geographical_region = bryten_ostsiedlung_prussisch_region }
	}
	
	option = {# Embrace prussisch
		name = tapestry_hre.066.embrace
		show_as_tooltip = {
			set_culture = culture:prussisch
			every_in_list = {
				list = anglo_saxon_counties
				limit = {
					holder.top_liege = root.top_liege
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
				}
				set_county_culture = culture:prussisch
			}
		}
		# Convert the norman counties to prussisch
		every_in_list = {
			list = anglo_saxon_counties
			limit = {
				holder.top_liege = root.top_liege
				OR = {
					has_culture	= culture:saxon
					has_culture	= culture:swabian
					has_culture	= culture:bavarian
					has_culture	= culture:franconian
				}
			}	
			# All German counties in Southernitaly become Sicilian
			hidden_effect = {
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:saxon
					NEW_CULTURE = culture:prussisch
					REGION = bryten_ostsiedlung_prussisch_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:franconian
					NEW_CULTURE = culture:prussisch
					REGION = bryten_ostsiedlung_prussisch_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:swabian
					NEW_CULTURE = culture:prussisch
					REGION = bryten_ostsiedlung_prussisch_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:bavarian
					NEW_CULTURE = culture:prussisch
					REGION = bryten_ostsiedlung_prussisch_region
				}
			}
		}
	}
}
tapestry_hre.067 = {# Let other players know that Prussisch has been created
	type = character_event
	title = tapestry_hre.067.t
	desc = tapestry_hre.067.desc
	theme = culture_change

	left_portrait = {
		character = root
		animation = personality_rational
	}

	option = {
		name = tapestry_hre.067.a
	}
}
# balte
tapestry_hre.068 = {# Balte Culture forming
	hidden = yes
	
	immediate = {
		# Save scopes for player notification events.
		culture:franconian = { save_scope_as = franconian }
		culture:balte = {
			# 'Hybridize' this culture by copying innovations from parent cultures. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:franconian
			get_all_innovations_from = culture:livonian

			# Save scope for player notification events.
			save_scope_as = balte
		}

		# German counties in Southernitaly will convert to Sicilian
		culture:saxon = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_balte_region }
				}
				add_to_list = balte_counties
			}
		}
		culture:franconian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_balte_region }
				}
				add_to_list = balte_counties
			}
		}
		culture:swabian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_balte_region }
				}
				add_to_list = balte_counties
			}
		}
		culture:bavarian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_balte_region }
				}
				add_to_list = balte_counties
			}
		}
		# Convert the German counties to anglo-norse
		every_in_list = {
			list = sicilian_counties
			limit = {
				# Same-culture players get an event informing them of their county's conversion *before* it happens (for their provinces only).
				NOT = {
					holder = {
						OR = {
							AND = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_balte_region }
							}
							any_liege_or_above = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_balte_region }
							}
						}
					}
				}
			}
						
			# All German counties in Sicily become sicilian
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:saxon
				NEW_CULTURE = culture:balte
				REGION = bryten_ostsiedlung_balte_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:franconian
				NEW_CULTURE = culture:balte
				REGION = bryten_ostsiedlung_balte_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:swabian
				NEW_CULTURE = culture:balte
				REGION = bryten_ostsiedlung_balte_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:bavarian
				NEW_CULTURE = culture:balte
				REGION = bryten_ostsiedlung_balte_region
			}
		}

		# Norman Rulers get the next decision
		every_ruler = {
			limit = {
				AND = {
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
					is_landed = yes			
					capital_province = { geographical_region = bryten_ostsiedlung_balte_region }
				}
			}
			trigger_event = tapestry_hre.069
		}

		# Send the appropraite notification event to each player.
		every_player = {
			if = {
				limit = {
					is_ai = no
					save_temporary_scope_as = player
					any_in_list = {
						list = sicilian_counties
						holder = { is_within_diplo_range = { CHARACTER = scope:player } }
					}
				}
				trigger_event = tapestry_hre.070
			}
		}
	}
}
tapestry_hre.069 = {# German Ruled Realms in Livonia
	type = character_event
	title = tapestry_hre.069.t
	desc = tapestry_hre.069.desc
	theme = culture_change

	trigger = {# safety checks
		OR = {
			has_culture	= culture:saxon
			has_culture	= culture:swabian
			has_culture	= culture:bavarian
			has_culture	= culture:franconian
		}
		is_landed = yes		
		capital_province = { geographical_region = bryten_ostsiedlung_balte_region }
	}
	
	option = {# Embrace balte
		name = tapestry_hre.069.embrace
		show_as_tooltip = {
			set_culture = culture:balte
			every_in_list = {
				list = anglo_saxon_counties
				limit = {
					holder.top_liege = root.top_liege
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
				}
				set_county_culture = culture:balte
			}
		}
		# Convert the norman counties to balte
		every_in_list = {
			list = anglo_saxon_counties
			limit = {
				holder.top_liege = root.top_liege
				OR = {
					has_culture	= culture:saxon
					has_culture	= culture:swabian
					has_culture	= culture:bavarian
					has_culture	= culture:franconian
				}
			}	
			# All German counties in Livonia become balte
			hidden_effect = {
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:saxon
					NEW_CULTURE = culture:balte
					REGION = bryten_ostsiedlung_balte_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:franconian
					NEW_CULTURE = culture:balte
					REGION = bryten_ostsiedlung_balte_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:swabian
					NEW_CULTURE = culture:balte
					REGION = bryten_ostsiedlung_balte_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:bavarian
					NEW_CULTURE = culture:balte
					REGION = bryten_ostsiedlung_balte_region
				}
			}
		}
	}
}
tapestry_hre.070 = {# Let other players know that Balte has been created
	type = character_event
	title = tapestry_hre.070.t
	desc = tapestry_hre.070.desc
	theme = culture_change

	left_portrait = {
		character = root
		animation = personality_rational
	}

	option = {
		name = tapestry_hre.070.a
	}
}
# schlesier
tapestry_hre.071 = {# Schlesier Culture forming
	hidden = yes
	
	immediate = {
		# Save scopes for player notification events.
		culture:franconian = { save_scope_as = franconian }
		culture:schlesier = {
			# 'Hybridize' this culture by copying innovations from parent cultures. Leave traditions as defined in the database.
			reset_culture_creation_date = yes
			get_all_innovations_from = culture:franconian
			get_all_innovations_from = culture:silesian

			# Save scope for player notification events.
			save_scope_as = schlesier
		}

		# German counties in Southernitaly will convert to Sicilian
		culture:saxon = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_silisia_region }
				}
				add_to_list = schlesier_counties
			}
		}
		culture:franconian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_silisia_region }
				}
				add_to_list = schlesier_counties
			}
		}
		culture:swabian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_silisia_region }
				}
				add_to_list = schlesier_counties
			}
		}
		culture:bavarian = {
			every_culture_county = {
				limit = {
					title_province = { geographical_region = bryten_ostsiedlung_silisia_region }
				}
				add_to_list = schlesier_counties
			}
		}		
		# Convert the German counties to anglo-norse
		every_in_list = {
			list = schlesier_counties
			limit = {
				# Same-culture players get an event informing them of their county's conversion *before* it happens (for their provinces only).
				NOT = {
					holder = {
						OR = {
							AND = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_silisia_region }
							}
							any_liege_or_above = {
								is_ai = no
								OR = {
									has_culture	= culture:saxon
									has_culture	= culture:swabian
									has_culture	= culture:bavarian
									has_culture	= culture:franconian
								}
								capital_province = { geographical_region = bryten_ostsiedlung_silisia_region }
							}
						}
					}
				}
			}
						
			# All German counties in Sicily become sicilian
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:saxon
				NEW_CULTURE = culture:schlesier
				REGION = bryten_ostsiedlung_silisia_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:franconian
				NEW_CULTURE = culture:schlesier
				REGION = bryten_ostsiedlung_silisia_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:swabian
				NEW_CULTURE = culture:schlesier
				REGION = bryten_ostsiedlung_silisia_region
			}
			convert_county_and_holder_if_in_region_effect = {
				OLD_CULTURE = culture:bavarian
				NEW_CULTURE = culture:schlesier
				REGION = bryten_ostsiedlung_silisia_region
			}
		}

		# Norman Rulers get the next decision
		every_ruler = {
			limit = {
				AND = {
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
					is_landed = yes			
					capital_province = { geographical_region = bryten_ostsiedlung_silisia_region }
				}
			}
			trigger_event = tapestry_hre.072
		}

		# Send the appropraite notification event to each player.
		every_player = {
			if = {
				limit = {
					is_ai = no
					save_temporary_scope_as = player
					any_in_list = {
						list = sicilian_counties
						holder = { is_within_diplo_range = { CHARACTER = scope:player } }
					}
				}
				trigger_event = tapestry_hre.073
			}
		}
	}
}
tapestry_hre.072 = {# German Ruled Realms in Silisia
	type = character_event
	title = tapestry_hre.072.t
	desc = tapestry_hre.072.desc
	theme = culture_change

	trigger = {# safety checks		
		OR = {
			has_culture	= culture:saxon
			has_culture	= culture:swabian
			has_culture	= culture:bavarian
			has_culture	= culture:franconian
		}
		is_landed = yes		
		capital_province = { geographical_region = bryten_ostsiedlung_silisia_region }
	}
	
	option = {# Embrace schlesier
		name = tapestry_hre.072.embrace
		show_as_tooltip = {
			set_culture = culture:schlesier
			every_in_list = {
				list = anglo_saxon_counties
				limit = {
					holder.top_liege = root.top_liege
					OR = {
						has_culture	= culture:saxon
						has_culture	= culture:swabian
						has_culture	= culture:bavarian
						has_culture	= culture:franconian
					}
				}
				set_county_culture = culture:schlesier
			}
		}
		# Convert the norman counties to schlesier
		every_in_list = {
			list = anglo_saxon_counties
			limit = {
				holder.top_liege = root.top_liege
				OR = {
					has_culture	= culture:saxon
					has_culture	= culture:swabian
					has_culture	= culture:bavarian
					has_culture	= culture:franconian
				}
			}	
			# All German counties in Southernitaly become Sicilian
			hidden_effect = {
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:saxon
					NEW_CULTURE = culture:schlesier
					REGION = bryten_ostsiedlung_silisia_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:franconian
					NEW_CULTURE = culture:schlesier
					REGION = bryten_ostsiedlung_silisia_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:swabian
					NEW_CULTURE = culture:schlesier
					REGION = bryten_ostsiedlung_silisia_region
				}
				convert_county_and_holder_if_in_region_effect = {
					OLD_CULTURE = culture:bavarian
					NEW_CULTURE = culture:schlesier
					REGION = bryten_ostsiedlung_silisia_region
				}
			}
		}
	}
}
tapestry_hre.073 = {# Let other players know that Schlesier has been created
	type = character_event
	title = tapestry_hre.073.t
	desc = tapestry_hre.073.desc
	theme = culture_change

	left_portrait = {
		character = root
		animation = personality_rational
	}

	option = {
		name = tapestry_hre.073.a
	}
}
